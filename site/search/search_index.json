{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Index Home Getting Started Web testing Selenium Playwright Tutorials: You may access the web testing tutorials by the left pane.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#index","text":"Home Getting Started Web testing Selenium Playwright Tutorials: You may access the web testing tutorials by the left pane.","title":"Index"},{"location":"getting-started/web-testing/azure/","text":"Cloning from Azure DevOps Azure DevOps is where all our testing repositories are located. Throughout your testing journey, you will be pulling and pushing to the various repos that are housed in this site. You may access it here . Navigating Azure DevOps Upon accessing Azure DevOps, you will be greeted by an overview summary. To the left there is a navigation pane with several links. Click on the \"Repos\" navigation link. Alternatively, this link will take you right there. You will then be greeted by a repository file system. If you click on the dropdown by the breadcrumb in the top navigation bar, you will be presented with a list of several options. Assuming you are in training, scroll to the Training_AutomatedTests option and click. This will open your training repository. Authentication Before you are ready to clone from Azure, you need to ensure that your system is set up with Azure DevOps HTTPS or SSH. This is beyond the scope of this tutorial, but the instructions for doing so are available here . Once you have set up authentication with Azure, click on the \"Clone\" button to copy the clone link to your clipboard. To clone the repo, open PowerShell, and preface the command with git clone . Your commmand line should look something like this: git clone https://MiXTelematics@dev.azure.com/MiXTelematics/AutomatedTests/_git/Training_AutomatedTests Or this: git clone git@ssh.dev.azure.com:v3/MiXTelematics/AutomatedTests/Training_AutomatedTests Then press Enter to clone the repository. Important repositories Java: AutomatedTests: The Java shakedown repo. DynaMiXRegression: The Java regression repo. MobileRegression: The current (old) testing repo. MobileTests: The upcoming (new) repo. C#: PlaywrightRegression: The C# regression repo. PlaywrightShakedown: The C# main shakedown repo. PlaywrightUnityShakedown: Playwright shakedown tests on the Unity platform. Microsmoketests: C# micro smoke testing repo. PlaywrightWatchdogs: C# watchdog tests.","title":"Cloning from Azure DevOps"},{"location":"getting-started/web-testing/azure/#cloning-from-azure-devops","text":"Azure DevOps is where all our testing repositories are located. Throughout your testing journey, you will be pulling and pushing to the various repos that are housed in this site. You may access it here .","title":"Cloning from Azure DevOps"},{"location":"getting-started/web-testing/azure/#navigating-azure-devops","text":"Upon accessing Azure DevOps, you will be greeted by an overview summary. To the left there is a navigation pane with several links. Click on the \"Repos\" navigation link. Alternatively, this link will take you right there. You will then be greeted by a repository file system. If you click on the dropdown by the breadcrumb in the top navigation bar, you will be presented with a list of several options. Assuming you are in training, scroll to the Training_AutomatedTests option and click. This will open your training repository.","title":"Navigating Azure DevOps"},{"location":"getting-started/web-testing/azure/#authentication","text":"Before you are ready to clone from Azure, you need to ensure that your system is set up with Azure DevOps HTTPS or SSH. This is beyond the scope of this tutorial, but the instructions for doing so are available here . Once you have set up authentication with Azure, click on the \"Clone\" button to copy the clone link to your clipboard. To clone the repo, open PowerShell, and preface the command with git clone . Your commmand line should look something like this: git clone https://MiXTelematics@dev.azure.com/MiXTelematics/AutomatedTests/_git/Training_AutomatedTests Or this: git clone git@ssh.dev.azure.com:v3/MiXTelematics/AutomatedTests/Training_AutomatedTests Then press Enter to clone the repository.","title":"Authentication"},{"location":"getting-started/web-testing/azure/#important-repositories","text":"Java: AutomatedTests: The Java shakedown repo. DynaMiXRegression: The Java regression repo. MobileRegression: The current (old) testing repo. MobileTests: The upcoming (new) repo. C#: PlaywrightRegression: The C# regression repo. PlaywrightShakedown: The C# main shakedown repo. PlaywrightUnityShakedown: Playwright shakedown tests on the Unity platform. Microsmoketests: C# micro smoke testing repo. PlaywrightWatchdogs: C# watchdog tests.","title":"Important repositories"},{"location":"getting-started/web-testing/git/","text":"Git setup Azure/Git Repositories To interact with Azure repositories, synchronize changes, and clone repositories, install Git, a version control system. Download Git Run the installer and continue with the default install settings. Verify Git installation with: git --version Azure and Git Depending on your skill level with Git, you may decide whether you need a GUI or not. I'm comfortable with Git : You're welcome to use Git from the command line. I'm unfamiliar with Git : It's recommended to use Git GUI instead (or your favourite Git GUI).","title":"Git setup"},{"location":"getting-started/web-testing/git/#git-setup","text":"","title":"Git setup"},{"location":"getting-started/web-testing/git/#azuregit-repositories","text":"To interact with Azure repositories, synchronize changes, and clone repositories, install Git, a version control system. Download Git Run the installer and continue with the default install settings. Verify Git installation with: git --version","title":"Azure/Git Repositories"},{"location":"getting-started/web-testing/git/#azure-and-git","text":"Depending on your skill level with Git, you may decide whether you need a GUI or not. I'm comfortable with Git : You're welcome to use Git from the command line. I'm unfamiliar with Git : It's recommended to use Git GUI instead (or your favourite Git GUI).","title":"Azure and Git"},{"location":"getting-started/web-testing/playwright-linux/","text":"Getting Started with Playwright on Linux (Ubuntu) Prerequisites Before running the Playwright test suite on Ubuntu, make sure to install the necessary dependencies. Microsoft .NET Start by installing Microsoft .NET. While the latest version works, it's recommended to install the targeted version, which is .NET 6.0. You can do this via APT with the following command: sudo apt-get update && sudo apt-get install dotnet6 VS Code Next, you'll need a C# compatible IDE. Visual Studio Code (VS Code) is recommended. You can download the latest version from their website . Cloning the Playwright Repository Ensure your device has the proper authentication to clone repositories from Azure. Then clone the Playwright repository and navigate to its folder through the command line. Installing Playwright To install the latest version of Playwright, similar to how you install browsers via Node.js, run: $ npm init playwright@latest --yes -- --quiet --browser=chromium --browser=firefox --browser=webkit --gha This command will install Playwright along with the recommended browsers. PowerShell You'll need PowerShell to run the installation script for the test suite. Install PowerShell by running: $ sudo snap install powershell --classic Brew and Allure Finally, install the latest version of Allure, an open-source automation testing report tool, using a third-party package manager. We'll use Homebrew for this. Run the following commands to download and install Homebrew: $ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Then, install Allure through Homebrew: $ brew install allure This will install Allure on your system. VS Code and Extensions For efficient use of Playwright with VS Code, download the following extensions: C# Dev Kit Playwright Test for VS Code Excel Viewer Installing an Extension To install an extension, click on the Extensions icon ${extensions} on the left navigation bar in VS Code. Use the search bar above the navigation bar to find and install the mentioned extensions. Cleaning and Building After installing the extensions, return to your command prompt (Terminal), navigate to the Playwright repository, and run the following commands: dotnet clean dotnet build Installing Ubuntu and PowerShell Dependencies Once the project is built, install the Linux dependencies using the command below: $ pwsh Test/KeywordDrivenTestFramework.Tests/bin/Debug/net6.0/playwright.ps1 install-deps Finally, to install the browser dependencies, run: $ pwsh Test/KeywordDrivenTestFramework.Tests/bin/Debug/net6.0/playwright.ps1 install You're now set to run Playwright tests on your Ubuntu device. Happy testing!","title":"Installing Playwright (Linux)"},{"location":"getting-started/web-testing/playwright-linux/#getting-started-with-playwright-on-linux-ubuntu","text":"","title":"Getting Started with Playwright on Linux (Ubuntu)"},{"location":"getting-started/web-testing/playwright-linux/#prerequisites","text":"Before running the Playwright test suite on Ubuntu, make sure to install the necessary dependencies.","title":"Prerequisites"},{"location":"getting-started/web-testing/playwright-linux/#microsoft-net","text":"Start by installing Microsoft .NET. While the latest version works, it's recommended to install the targeted version, which is .NET 6.0. You can do this via APT with the following command: sudo apt-get update && sudo apt-get install dotnet6","title":"Microsoft .NET"},{"location":"getting-started/web-testing/playwright-linux/#vs-code","text":"Next, you'll need a C# compatible IDE. Visual Studio Code (VS Code) is recommended. You can download the latest version from their website .","title":"VS Code"},{"location":"getting-started/web-testing/playwright-linux/#cloning-the-playwright-repository","text":"Ensure your device has the proper authentication to clone repositories from Azure. Then clone the Playwright repository and navigate to its folder through the command line.","title":"Cloning the Playwright Repository"},{"location":"getting-started/web-testing/playwright-linux/#installing-playwright","text":"To install the latest version of Playwright, similar to how you install browsers via Node.js, run: $ npm init playwright@latest --yes -- --quiet --browser=chromium --browser=firefox --browser=webkit --gha This command will install Playwright along with the recommended browsers.","title":"Installing Playwright"},{"location":"getting-started/web-testing/playwright-linux/#powershell","text":"You'll need PowerShell to run the installation script for the test suite. Install PowerShell by running: $ sudo snap install powershell --classic","title":"PowerShell"},{"location":"getting-started/web-testing/playwright-linux/#brew-and-allure","text":"Finally, install the latest version of Allure, an open-source automation testing report tool, using a third-party package manager. We'll use Homebrew for this. Run the following commands to download and install Homebrew: $ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Then, install Allure through Homebrew: $ brew install allure This will install Allure on your system.","title":"Brew and Allure"},{"location":"getting-started/web-testing/playwright-linux/#vs-code-and-extensions","text":"For efficient use of Playwright with VS Code, download the following extensions: C# Dev Kit Playwright Test for VS Code Excel Viewer","title":"VS Code and Extensions"},{"location":"getting-started/web-testing/playwright-linux/#installing-an-extension","text":"To install an extension, click on the Extensions icon ${extensions} on the left navigation bar in VS Code. Use the search bar above the navigation bar to find and install the mentioned extensions.","title":"Installing an Extension"},{"location":"getting-started/web-testing/playwright-linux/#cleaning-and-building","text":"After installing the extensions, return to your command prompt (Terminal), navigate to the Playwright repository, and run the following commands: dotnet clean dotnet build","title":"Cleaning and Building"},{"location":"getting-started/web-testing/playwright-linux/#installing-ubuntu-and-powershell-dependencies","text":"Once the project is built, install the Linux dependencies using the command below: $ pwsh Test/KeywordDrivenTestFramework.Tests/bin/Debug/net6.0/playwright.ps1 install-deps Finally, to install the browser dependencies, run: $ pwsh Test/KeywordDrivenTestFramework.Tests/bin/Debug/net6.0/playwright.ps1 install You're now set to run Playwright tests on your Ubuntu device. Happy testing!","title":"Installing Ubuntu and PowerShell Dependencies"},{"location":"getting-started/web-testing/playwright-windows/","text":"Getting Started with Playwright on Windows Prerequisites Before running the Playwright test suite on Windows, ensure you have the required dependencies installed. Microsoft .NET Begin by downloading Microsoft .NET. While the latest version works, it's recommended to install the targeted version, .NET 6.0. You can download it here . VS Code Next, you'll need a C# compatible IDE. Visual Studio Code (VS Code) is recommended. You can get the latest version from their website , or through the Windows Package Manager (winget). To download VS Code via winget, use the command below: winget install code Cloning the Playwright Repository Ensure your device has the correct authentication info to clone repositories from Azure. Clone the Playwright repository to your device and navigate to its folder through the command line. Installing Playwright To install the latest version of Playwright, similar to installing browsers via Node.js, run: $ npm init playwright@latest --yes -- --quiet --browser=chromium --browser=firefox --browser=webkit --gha This command installs Playwright along with the recommended browsers. Scoop and Allure Finally, install the latest version of Allure, an open-source automation testing report tool, using a third-party package manager. We'll use the Scoop Package Manager for this. Run the following commands to download and install the latest version of Scoop from their website: $ Set-Execution-Policy -ExecutionPolicy RemoteSigned -Scope CurrentUser $ Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression $ irm get.scoop.sh | iex Then, install Allure via Scoop: $ scoop install allure This will install Allure on your system. VS Code and Extensions For efficient use of Playwright with VS Code, download the following extensions: C# Dev Kit Playwright Test for VS Code Excel Viewer Installing an Extension To install an extension, click on the Extensions icon ${extensions} on the left navigation bar in VS Code. Use the search bar above the navigation bar to find and install the mentioned extensions. Cleaning and Building After installing the extensions, return to your command prompt (Powershell) and enter the following commands: dotnet clean dotnet build You're now set to run Playwright tests on your device. Happy testing!","title":"Installing Playwright"},{"location":"getting-started/web-testing/playwright-windows/#getting-started-with-playwright-on-windows","text":"","title":"Getting Started with Playwright on Windows"},{"location":"getting-started/web-testing/playwright-windows/#prerequisites","text":"Before running the Playwright test suite on Windows, ensure you have the required dependencies installed.","title":"Prerequisites"},{"location":"getting-started/web-testing/playwright-windows/#microsoft-net","text":"Begin by downloading Microsoft .NET. While the latest version works, it's recommended to install the targeted version, .NET 6.0. You can download it here .","title":"Microsoft .NET"},{"location":"getting-started/web-testing/playwright-windows/#vs-code","text":"Next, you'll need a C# compatible IDE. Visual Studio Code (VS Code) is recommended. You can get the latest version from their website , or through the Windows Package Manager (winget). To download VS Code via winget, use the command below: winget install code","title":"VS Code"},{"location":"getting-started/web-testing/playwright-windows/#cloning-the-playwright-repository","text":"Ensure your device has the correct authentication info to clone repositories from Azure. Clone the Playwright repository to your device and navigate to its folder through the command line.","title":"Cloning the Playwright Repository"},{"location":"getting-started/web-testing/playwright-windows/#installing-playwright","text":"To install the latest version of Playwright, similar to installing browsers via Node.js, run: $ npm init playwright@latest --yes -- --quiet --browser=chromium --browser=firefox --browser=webkit --gha This command installs Playwright along with the recommended browsers.","title":"Installing Playwright"},{"location":"getting-started/web-testing/playwright-windows/#scoop-and-allure","text":"Finally, install the latest version of Allure, an open-source automation testing report tool, using a third-party package manager. We'll use the Scoop Package Manager for this. Run the following commands to download and install the latest version of Scoop from their website: $ Set-Execution-Policy -ExecutionPolicy RemoteSigned -Scope CurrentUser $ Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression $ irm get.scoop.sh | iex Then, install Allure via Scoop: $ scoop install allure This will install Allure on your system.","title":"Scoop and Allure"},{"location":"getting-started/web-testing/playwright-windows/#vs-code-and-extensions","text":"For efficient use of Playwright with VS Code, download the following extensions: C# Dev Kit Playwright Test for VS Code Excel Viewer","title":"VS Code and Extensions"},{"location":"getting-started/web-testing/playwright-windows/#installing-an-extension","text":"To install an extension, click on the Extensions icon ${extensions} on the left navigation bar in VS Code. Use the search bar above the navigation bar to find and install the mentioned extensions.","title":"Installing an Extension"},{"location":"getting-started/web-testing/playwright-windows/#cleaning-and-building","text":"After installing the extensions, return to your command prompt (Powershell) and enter the following commands: dotnet clean dotnet build You're now set to run Playwright tests on your device. Happy testing!","title":"Cleaning and Building"},{"location":"getting-started/web-testing/selenium/","text":"Getting Started with Selenium Dependencies Before starting with Selenium, make sure you have the necessary dependencies installed. Java Development Kit (JDK) and NetBeans OpenJDK Firstly, install Java Development Kit (OpenJDK) version 8. Download OpenJDK 8 NetBeans The recommended IDE to use with OpenJDK 8 is NetBeans, version 18 or lower will work. You can download NetBeans 17 here . Chrome, ChromeDriver, and Node.js Next, you'll need to install the latest version of Chrome for Testing, along with ChromeDriver, which enables Selenium (and other web testing frameworks) to interact with Chrome. Chrome for Testing and ChromeDriver can be installed via Node.js, which is a cross-platform runtime environment based on JavaScript. Download Node.js (latest) To verify Node.js installation, run these commands in Windows PowerShell: $ node --version $ npm --version You should see version numbers for Node.js and npm. If not, follow the steps here . Once Node.js is installed, install Chrome for Testing and ChromeDriver by running these commands in PowerShell: $ npm install -g @puppeteer/browsers $ npx @puppeteer/browsers install chromedriver@stable $ npx @puppeteer/browsers install chrome@stable This installs the most recent stable version of Chrome, ChromeDriver, and a simple browser driver through Node.js. Setting up Environment Variables After installing OpenJDK, Chrome, and ChromeDriver, set up your environment variables. In your Windows search bar, type \"path\" and select \"Edit system environment variables\". This opens System Properties. Click \"Environment Variables\" in the bottom-left corner. You'll see user and system environment variables. Modify system variables for system-wide changes. To add new system environment variables: 1. Click \"New\". 2. Specify variable name and value. For Java installation, set variable name as JAVA_HOME and value to your OpenJDK 8 installation directory. Assuming default installation, it should be C:\\Program Files\\OpenLogic\\jdk-8.0.422.05-hotspot\\ . For Chrome and ChromeDriver, move installations to a D:\\ drive. If you lack a D:\\ drive, partition your drive. Here's a guide. Alternatively, use an external disk drive recognized as D:\\ . Chrome should be in D:\\Chrome\\chrome-win64 , and ChromeDriver in D:\\chromedriver\\chromedriver-win64 . Save changes and restart your computer. Continue to Git Azure That's it! You're ready to start testing with Selenium.","title":"Installing Selenium"},{"location":"getting-started/web-testing/selenium/#getting-started-with-selenium","text":"","title":"Getting Started with Selenium"},{"location":"getting-started/web-testing/selenium/#dependencies","text":"Before starting with Selenium, make sure you have the necessary dependencies installed.","title":"Dependencies"},{"location":"getting-started/web-testing/selenium/#java-development-kit-jdk-and-netbeans","text":"","title":"Java Development Kit (JDK) and NetBeans"},{"location":"getting-started/web-testing/selenium/#openjdk","text":"Firstly, install Java Development Kit (OpenJDK) version 8. Download OpenJDK 8","title":"OpenJDK"},{"location":"getting-started/web-testing/selenium/#netbeans","text":"The recommended IDE to use with OpenJDK 8 is NetBeans, version 18 or lower will work. You can download NetBeans 17 here .","title":"NetBeans"},{"location":"getting-started/web-testing/selenium/#chrome-chromedriver-and-nodejs","text":"Next, you'll need to install the latest version of Chrome for Testing, along with ChromeDriver, which enables Selenium (and other web testing frameworks) to interact with Chrome. Chrome for Testing and ChromeDriver can be installed via Node.js, which is a cross-platform runtime environment based on JavaScript. Download Node.js (latest) To verify Node.js installation, run these commands in Windows PowerShell: $ node --version $ npm --version You should see version numbers for Node.js and npm. If not, follow the steps here . Once Node.js is installed, install Chrome for Testing and ChromeDriver by running these commands in PowerShell: $ npm install -g @puppeteer/browsers $ npx @puppeteer/browsers install chromedriver@stable $ npx @puppeteer/browsers install chrome@stable This installs the most recent stable version of Chrome, ChromeDriver, and a simple browser driver through Node.js.","title":"Chrome, ChromeDriver, and Node.js"},{"location":"getting-started/web-testing/selenium/#setting-up-environment-variables","text":"After installing OpenJDK, Chrome, and ChromeDriver, set up your environment variables. In your Windows search bar, type \"path\" and select \"Edit system environment variables\". This opens System Properties. Click \"Environment Variables\" in the bottom-left corner. You'll see user and system environment variables. Modify system variables for system-wide changes. To add new system environment variables: 1. Click \"New\". 2. Specify variable name and value. For Java installation, set variable name as JAVA_HOME and value to your OpenJDK 8 installation directory. Assuming default installation, it should be C:\\Program Files\\OpenLogic\\jdk-8.0.422.05-hotspot\\ . For Chrome and ChromeDriver, move installations to a D:\\ drive. If you lack a D:\\ drive, partition your drive. Here's a guide. Alternatively, use an external disk drive recognized as D:\\ . Chrome should be in D:\\Chrome\\chrome-win64 , and ChromeDriver in D:\\chromedriver\\chromedriver-win64 . Save changes and restart your computer.","title":"Setting up Environment Variables"},{"location":"getting-started/web-testing/selenium/#continue-to","text":"Git Azure That's it! You're ready to start testing with Selenium.","title":"Continue to"},{"location":"node-setup/linux-x64/","text":"Setting up Ubuntu (x64) Node Environment XRDP Installation On the remote machine, execute: sudo apt install xrdp Environment Variables Modify either ~/.xsessionrc or /etc/xrdp/startwm.sh (recommended) and add the following lines at the very top: export GNOME_SHELL_SESSION_MODE=ubuntu export XDG_CURRENT_DESKTOP=ubuntu:GNOME These commands assume Ubuntu with GNOME Desktop. Reboot the remote machine to apply changes. Permissions XRDP may require additional user permissions. Lack of access may lead to a blank screen. To fix this, run: sudo adduser xrdp ssl-cert This adds the xrdp user to the ssl-cert group for SSL certificate permissions. Reboot the remote machine to apply changes. Enable D-Bus D-Bus is essential for applications communication. To avoid issues, run: sudo apt install dbus-x11 dbus-launch These commands install dbus-x11 for XRDP and launch a new D-Bus session. Launching an XRDP Session For Windows users, use Remote Desktop Connection. Click 'Show Options' and enter the IP address and user name. Click 'Connect'. Enter the user's password and click 'Allow me to save credentials' if desired. Leave the 'Session' field unchanged. Click OK to connect. If issues arise, review the steps above. Playwright Now connected via XRDP, you can install Playwright. Use SSH instead of XRDP for installation. Connect via ssh <username>@<IP-address> . Follow standard Playwright installation instructions here . Jenkins Create New Device Create a new device on Jenkins. To make the agent script work, add dsstbautomate 10.34.16.11 to /etc/hosts . This ensures Linux recognizes 'dsstbautomate' as the Jenkins site alias. Agent References https://devicetests.com/fix-xrdp-login-blank-screen-issues","title":"Node Setup"},{"location":"node-setup/linux-x64/#setting-up-ubuntu-x64-node-environment","text":"","title":"Setting up Ubuntu (x64) Node Environment"},{"location":"node-setup/linux-x64/#xrdp","text":"","title":"XRDP"},{"location":"node-setup/linux-x64/#installation","text":"On the remote machine, execute: sudo apt install xrdp","title":"Installation"},{"location":"node-setup/linux-x64/#environment-variables","text":"Modify either ~/.xsessionrc or /etc/xrdp/startwm.sh (recommended) and add the following lines at the very top: export GNOME_SHELL_SESSION_MODE=ubuntu export XDG_CURRENT_DESKTOP=ubuntu:GNOME These commands assume Ubuntu with GNOME Desktop. Reboot the remote machine to apply changes.","title":"Environment Variables"},{"location":"node-setup/linux-x64/#permissions","text":"XRDP may require additional user permissions. Lack of access may lead to a blank screen. To fix this, run: sudo adduser xrdp ssl-cert This adds the xrdp user to the ssl-cert group for SSL certificate permissions. Reboot the remote machine to apply changes.","title":"Permissions"},{"location":"node-setup/linux-x64/#enable-d-bus","text":"D-Bus is essential for applications communication. To avoid issues, run: sudo apt install dbus-x11 dbus-launch These commands install dbus-x11 for XRDP and launch a new D-Bus session.","title":"Enable D-Bus"},{"location":"node-setup/linux-x64/#launching-an-xrdp-session","text":"For Windows users, use Remote Desktop Connection. Click 'Show Options' and enter the IP address and user name. Click 'Connect'. Enter the user's password and click 'Allow me to save credentials' if desired. Leave the 'Session' field unchanged. Click OK to connect. If issues arise, review the steps above.","title":"Launching an XRDP Session"},{"location":"node-setup/linux-x64/#playwright","text":"Now connected via XRDP, you can install Playwright. Use SSH instead of XRDP for installation. Connect via ssh <username>@<IP-address> . Follow standard Playwright installation instructions here .","title":"Playwright"},{"location":"node-setup/linux-x64/#jenkins","text":"","title":"Jenkins"},{"location":"node-setup/linux-x64/#create-new-device","text":"Create a new device on Jenkins. To make the agent script work, add dsstbautomate 10.34.16.11 to /etc/hosts . This ensures Linux recognizes 'dsstbautomate' as the Jenkins site alias.","title":"Create New Device"},{"location":"node-setup/linux-x64/#agent","text":"","title":"Agent"},{"location":"node-setup/linux-x64/#references","text":"https://devicetests.com/fix-xrdp-login-blank-screen-issues","title":"References"},{"location":"tutorials/tutorial-1/","text":"Test Case: Tutorial 1 - Navigate to Assets using xPaths Objective The objective of this test is to navigate to the Assets section using xPaths. Steps Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on the Assets link Notes Ensure correct xPaths are used for navigation. Verify that the Assets page loads successfully.","title":"Tutorial 1"},{"location":"tutorials/tutorial-1/#test-case-tutorial-1-navigate-to-assets-using-xpaths","text":"","title":"Test Case: Tutorial 1 - Navigate to Assets using xPaths"},{"location":"tutorials/tutorial-1/#objective","text":"The objective of this test is to navigate to the Assets section using xPaths.","title":"Objective"},{"location":"tutorials/tutorial-1/#steps","text":"Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on the Assets link","title":"Steps"},{"location":"tutorials/tutorial-1/#notes","text":"Ensure correct xPaths are used for navigation. Verify that the Assets page loads successfully.","title":"Notes"},{"location":"tutorials/tutorial-10/","text":"Test Case: Tutorial 10 - Extract Data into a Parameter for Jenkins Objective The objective of this test is to learn how to extract the Asset ID and use it as a parameter for Jenkins reports. Steps Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on Assets Validate Asset ID: Locate and validate that the Asset ID is \"888\" Extract Asset ID as a Parameter for Jenkins: Write logic to extract the Asset ID and pass it as a parameter for Jenkins. Ensure that the extracted Asset ID appears in the Jenkins report as a parameter. Notes Ensure the Asset ID is correctly identified and extracted from the page. Verify that the extracted Asset ID appears in Jenkins when the test report is generated.","title":"Tutorial 10"},{"location":"tutorials/tutorial-10/#test-case-tutorial-10-extract-data-into-a-parameter-for-jenkins","text":"","title":"Test Case: Tutorial 10 - Extract Data into a Parameter for Jenkins"},{"location":"tutorials/tutorial-10/#objective","text":"The objective of this test is to learn how to extract the Asset ID and use it as a parameter for Jenkins reports.","title":"Objective"},{"location":"tutorials/tutorial-10/#steps","text":"Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on Assets Validate Asset ID: Locate and validate that the Asset ID is \"888\" Extract Asset ID as a Parameter for Jenkins: Write logic to extract the Asset ID and pass it as a parameter for Jenkins. Ensure that the extracted Asset ID appears in the Jenkins report as a parameter.","title":"Steps"},{"location":"tutorials/tutorial-10/#notes","text":"Ensure the Asset ID is correctly identified and extracted from the page. Verify that the extracted Asset ID appears in Jenkins when the test report is generated.","title":"Notes"},{"location":"tutorials/tutorial-2/","text":"Test Case: Tutorial 2 - Filter for MiX Automation Live Unit Objective The objective of this test is to filter for the MiX Automation Live Unit . Steps Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Live Tracking: Click on the Monitor tab Click on Live Tracking Apply Filter: On the left, click the filter box Enter \"MiX Automation Live Unit\" in the filter field Notes Ensure the correct unit is displayed after applying the filter. Verify that filtering functions correctly and returns the expected results.","title":"Tutorial 2"},{"location":"tutorials/tutorial-2/#test-case-tutorial-2-filter-for-mix-automation-live-unit","text":"","title":"Test Case: Tutorial 2 - Filter for MiX Automation Live Unit"},{"location":"tutorials/tutorial-2/#objective","text":"The objective of this test is to filter for the MiX Automation Live Unit .","title":"Objective"},{"location":"tutorials/tutorial-2/#steps","text":"Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Live Tracking: Click on the Monitor tab Click on Live Tracking Apply Filter: On the left, click the filter box Enter \"MiX Automation Live Unit\" in the filter field","title":"Steps"},{"location":"tutorials/tutorial-2/#notes","text":"Ensure the correct unit is displayed after applying the filter. Verify that filtering functions correctly and returns the expected results.","title":"Notes"},{"location":"tutorials/tutorial-3/","text":"Test Case: Tutorial 3 - Add a New Driver Objective The objective of this test is to add a New Driver to the system. Steps Login to integration.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Drivers: Click on the Monitor tab Click on Drivers Add a New Driver: Click the Green + sign ( Add Driver ) Under Name , enter: \"Test New MiX Driver\" Under Site , select: \"Default site\" Click Save Notes Ensure the new driver appears in the Drivers list after saving. Verify that all details are correctly entered and saved successfully.","title":"Tutorial 3"},{"location":"tutorials/tutorial-3/#test-case-tutorial-3-add-a-new-driver","text":"","title":"Test Case: Tutorial 3 - Add a New Driver"},{"location":"tutorials/tutorial-3/#objective","text":"The objective of this test is to add a New Driver to the system.","title":"Objective"},{"location":"tutorials/tutorial-3/#steps","text":"Login to integration.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Drivers: Click on the Monitor tab Click on Drivers Add a New Driver: Click the Green + sign ( Add Driver ) Under Name , enter: \"Test New MiX Driver\" Under Site , select: \"Default site\" Click Save","title":"Steps"},{"location":"tutorials/tutorial-3/#notes","text":"Ensure the new driver appears in the Drivers list after saving. Verify that all details are correctly entered and saved successfully.","title":"Notes"},{"location":"tutorials/tutorial-4/","text":"Test Case: Tutorial 4 - Remove a Driver using Robot Objective The objective of this test is to remove a driver using Robot. Steps Login to integration.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Drivers: Click on the Monitor tab Click on Drivers Remove the Driver: Filter for \"Test New MiX Driver\" (created in Training3 ) Click on the dropdown next to the driver Select Remove Driver Confirm the removal Notes Ensure the driver is no longer listed after removal. Verify that the removal process completes without errors.","title":"Tutorial 4"},{"location":"tutorials/tutorial-4/#test-case-tutorial-4-remove-a-driver-using-robot","text":"","title":"Test Case: Tutorial 4 - Remove a Driver using Robot"},{"location":"tutorials/tutorial-4/#objective","text":"The objective of this test is to remove a driver using Robot.","title":"Objective"},{"location":"tutorials/tutorial-4/#steps","text":"Login to integration.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Drivers: Click on the Monitor tab Click on Drivers Remove the Driver: Filter for \"Test New MiX Driver\" (created in Training3 ) Click on the dropdown next to the driver Select Remove Driver Confirm the removal","title":"Steps"},{"location":"tutorials/tutorial-4/#notes","text":"Ensure the driver is no longer listed after removal. Verify that the removal process completes without errors.","title":"Notes"},{"location":"tutorials/tutorial-5/","text":"Test Case: Tutorial 5 - Write Using Robot Objective The objective of this test is to add an asset and write the Registration Number using Robot. Steps Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on Assets Add a New Asset: Click the Green + sign ( Add Asset ) Enter Asset Description : \"Test New MiX Asset\" Select Asset Type : \"Light Vehicle\" Enter Registration Number using Robot: \"9876543210\" Select Site : \"Default Site\" Click Save Click Close Remove the Asset: Filter for the newly created asset Remove the asset Confirm removal Notes Ensure that the Registration Number is entered correctly using Robot. Verify that the asset appears in the list before removal. Confirm that the asset is successfully removed. When testing, you may need to check timing to ensure smooth execution.","title":"Tutorial 5"},{"location":"tutorials/tutorial-5/#test-case-tutorial-5-write-using-robot","text":"","title":"Test Case: Tutorial 5 - Write Using Robot"},{"location":"tutorials/tutorial-5/#objective","text":"The objective of this test is to add an asset and write the Registration Number using Robot.","title":"Objective"},{"location":"tutorials/tutorial-5/#steps","text":"Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on Assets Add a New Asset: Click the Green + sign ( Add Asset ) Enter Asset Description : \"Test New MiX Asset\" Select Asset Type : \"Light Vehicle\" Enter Registration Number using Robot: \"9876543210\" Select Site : \"Default Site\" Click Save Click Close Remove the Asset: Filter for the newly created asset Remove the asset Confirm removal","title":"Steps"},{"location":"tutorials/tutorial-5/#notes","text":"Ensure that the Registration Number is entered correctly using Robot. Verify that the asset appears in the list before removal. Confirm that the asset is successfully removed. When testing, you may need to check timing to ensure smooth execution.","title":"Notes"},{"location":"tutorials/tutorial-6/","text":"Test Case: Tutorial 6 - Validate a Field Objective The objective of this test is to validate the Passenger ID field. Steps Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Passengers: Click on the Monitor tab Click on Passengers Validate Field: Filter Passengers by entering \"MiX Passenger\" Verify that the Passenger ID field is \"2\" Clear the Filter: Remove the filter from the filter bar Notes Ensure the Passenger ID field is displayed correctly. Verify that the filter works as expected. Confirm that clearing the filter restores the full passenger list.","title":"Tutorial 6"},{"location":"tutorials/tutorial-6/#test-case-tutorial-6-validate-a-field","text":"","title":"Test Case: Tutorial 6 - Validate a Field"},{"location":"tutorials/tutorial-6/#objective","text":"The objective of this test is to validate the Passenger ID field.","title":"Objective"},{"location":"tutorials/tutorial-6/#steps","text":"Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Passengers: Click on the Monitor tab Click on Passengers Validate Field: Filter Passengers by entering \"MiX Passenger\" Verify that the Passenger ID field is \"2\" Clear the Filter: Remove the filter from the filter bar","title":"Steps"},{"location":"tutorials/tutorial-6/#notes","text":"Ensure the Passenger ID field is displayed correctly. Verify that the filter works as expected. Confirm that clearing the filter restores the full passenger list.","title":"Notes"},{"location":"tutorials/tutorial-7/","text":"Test Case: Tutorial 7 - Delete Multiple Created Assets Objective The objective of this test is to delete multiple Test MiX New Assets from the system. Steps Login to UAT.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on Assets Filter and Delete Assets: Filter Assets by entering \"Test MiX New Asset\" in the filter bar Retrieve the number of assets displayed after filtering Output the total number of assets to delete: java System.out.println(\"Number of Assets to delete: \" + count); Create a loop to delete all Test MiX New Assets Select the first asset Click Remove Confirm removal Repeat until all assets are deleted Notes Ensure that the loop continues until the number of filtered assets reaches 0 . The asset count should be retrieved from the top-left filter results. Verify that all Test MiX New Assets are successfully removed.","title":"Tutorial 7"},{"location":"tutorials/tutorial-7/#test-case-tutorial-7-delete-multiple-created-assets","text":"","title":"Test Case: Tutorial 7 - Delete Multiple Created Assets"},{"location":"tutorials/tutorial-7/#objective","text":"The objective of this test is to delete multiple Test MiX New Assets from the system.","title":"Objective"},{"location":"tutorials/tutorial-7/#steps","text":"Login to UAT.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on Assets Filter and Delete Assets: Filter Assets by entering \"Test MiX New Asset\" in the filter bar Retrieve the number of assets displayed after filtering Output the total number of assets to delete: java System.out.println(\"Number of Assets to delete: \" + count); Create a loop to delete all Test MiX New Assets Select the first asset Click Remove Confirm removal Repeat until all assets are deleted","title":"Steps"},{"location":"tutorials/tutorial-7/#notes","text":"Ensure that the loop continues until the number of filtered assets reaches 0 . The asset count should be retrieved from the top-left filter results. Verify that all Test MiX New Assets are successfully removed.","title":"Notes"},{"location":"tutorials/tutorial-8/","text":"# Test Case: Tutorial 8 - Get the Current Date and Time ## Objective The objective of this test is to write the **current date and time** as the **Passenger Name** and perform subsequent actions. ## Steps 1. **Login** to [uat.mixtelematics.com](https://uat.mixtelematics.com) with the following credentials: - **Username:** `shakedown.fleet@mailinator.com` - **Password:** `shakedownfleet123` 2. **Select Organisation:** - Navigate to **Test RSO** > **MiX Automation** 3. **Navigate to Passengers:** - Click on the **Monitor** tab - Click on **Passengers** 4. **Add a New Passenger:** - Click the **Green +** sign (**Add Passenger**) - Under **Passenger Name**, write the **current date and time**. - This can be done dynamically using a function to get the current date and time, such as: ```java String currentDateTime = java.time.LocalDateTime.now().toString(); passengerNameField.sendKeys(currentDateTime); ``` - Click **Save** 5. **Filter for the Created Passenger:** - Use the filter to find the newly created passenger by their **Name** (the current date and time). 6. **Remove the Created Passenger:** - Select the passenger - Click **Remove** - Confirm the removal ## Notes - Ensure that the **current date and time** is accurately captured and displayed in the passenger name. - Verify that the newly created passenger appears in the list after saving. - Confirm that the passenger is successfully removed.","title":"Tutorial 8"},{"location":"tutorials/tutorial-9/","text":"Test Case: Tutorial 9 - Work with Multiple Environments Objective The objective of this test is to learn how to work with multiple environments (UAT and INT) and extract Last Trip Details based on the environment. Steps Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on Assets Filter for 'MiX Automation Live Unit': Use the filter to find the 'MiX Automation Live Unit' asset Extract the Last Trip Details: Write a function that checks the current environment and retrieves the Last Trip Details accordingly. The function should differentiate between UAT and INT environments: HINT: if (currentEnvironment == Enums.Environment.INT) { // Logic for extracting details in INT environment } else { // Logic for extracting details in UAT environment } Notes The XPath used to extract Last Trip Details in UAT and INT environments will differ. Use an enum ( Enums.Environment.UAT or Enums.Environment.INT ) to manage the environment-based extraction. Verify that the correct details are retrieved for both environments.","title":"Tutorial 9"},{"location":"tutorials/tutorial-9/#test-case-tutorial-9-work-with-multiple-environments","text":"","title":"Test Case: Tutorial 9 - Work with Multiple Environments"},{"location":"tutorials/tutorial-9/#objective","text":"The objective of this test is to learn how to work with multiple environments (UAT and INT) and extract Last Trip Details based on the environment.","title":"Objective"},{"location":"tutorials/tutorial-9/#steps","text":"Login to uat.mixtelematics.com with the following credentials: Username: shakedown.fleet@mailinator.com Password: shakedownfleet123 Select Organisation: Navigate to Test RSO > MiX Automation Navigate to Assets: Click on the Monitor tab Click on Assets Filter for 'MiX Automation Live Unit': Use the filter to find the 'MiX Automation Live Unit' asset Extract the Last Trip Details: Write a function that checks the current environment and retrieves the Last Trip Details accordingly. The function should differentiate between UAT and INT environments: HINT: if (currentEnvironment == Enums.Environment.INT) { // Logic for extracting details in INT environment } else { // Logic for extracting details in UAT environment }","title":"Steps"},{"location":"tutorials/tutorial-9/#notes","text":"The XPath used to extract Last Trip Details in UAT and INT environments will differ. Use an enum ( Enums.Environment.UAT or Enums.Environment.INT ) to manage the environment-based extraction. Verify that the correct details are retrieved for both environments.","title":"Notes"}]}