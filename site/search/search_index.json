{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Powerfleet Testing Documentation","text":"<p>This documentation provides comprehensive guides and tutorials for various types of software testing. Navigate through the left sidebar to explore different sections and technologies.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Learn how to set up your testing environment for various platforms and technologies:</p>"},{"location":"#web-testing","title":"Web Testing","text":"<ul> <li>Selenium (Windows)</li> <li>Playwright (Windows)</li> <li>Playwright (Linux)</li> </ul>"},{"location":"#api-testing","title":"API Testing","text":"<ul> <li>PyTest</li> <li>Pester</li> </ul>"},{"location":"#mobile-testing","title":"Mobile Testing","text":"<ul> <li>Android</li> </ul>"},{"location":"#writing-tests","title":"Writing Tests","text":"<p>Detailed guides on writing effective tests for specific tools:</p> <ul> <li>Selenium</li> <li>Playwright</li> </ul>"},{"location":"#debugging","title":"Debugging","text":"<p>Troubleshooting guides for your tests:</p> <ul> <li>Introduction</li> <li>Selenium</li> <li>Playwright</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<p>Explore more advanced configurations and setups:</p> <ul> <li>Linux Node setup</li> </ul>"},{"location":"#miscellaneous","title":"Miscellaneous","text":"<p>Other helpful documentation:</p> <ul> <li>Environments</li> <li>Azure</li> <li>Git *</li> </ul>"},{"location":"debugging/debugging/","title":"Finding and Fixing Hiccups: A Beginner's Guide to Debugging Tests","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>\"It's a human sign, when things go wrong\"</p> <p>- Elton John, \"Sacrifice\" (Encountering issues is a normal part of development)</p> <p>Welcome! When working with automated tests, you'll inevitably encounter situations where they don't run as expected. This is a standard part of the process, and finding and fixing these issues is called debugging.</p> <p>Simply put, debugging means finding and fixing any issues that stop our automated tests from running correctly or giving the right results.</p> <p>Here are common reasons why a test might fail:</p> <ul> <li>Syntax Errors:</li> <li>These are like typos or grammatical mistakes in the test script code (e.g., a missing bracket <code>]</code>, a misplaced comma <code>,</code>). They usually prevent the test from starting at all.</li> <li> <p>Example: Forgetting a closing parenthesis like <code>print(\"Hello\"</code> instead of <code>print(\"Hello\")</code>, or misplacing a comma in a function call.</p> </li> <li> <p>Runtime Errors:</p> </li> <li>These errors occur during the test execution when the script tries to do something impossible or invalid at that moment.</li> <li> <p>Example: Trying to use a variable that hasn't been assigned a value yet (resulting in a <code>NameError</code> or <code>NullPointerException</code>), or using an element locator (like an XPath <code>//button[@id='submit_button']</code>) that doesn't match any element currently on the page because the ID changed. These typically stop the test mid-execution.</p> </li> <li> <p>Logical Errors:</p> </li> <li>These can be tricky. The test runs without crashing, but it doesn't validate the right thing, or it produces an incorrect pass/fail result because the underlying logic or assumptions in the test steps are flawed.</li> <li> <p>Example: A test verifies that a shopping cart total is greater than $0 (<code>total &gt; 0</code>) after adding an item, but it should have checked if the total equals the exact price of the item (<code>total == itemPrice</code>). The test might pass even if the total is wrong, just as long as it's not zero.</p> </li> <li> <p>Element Not Found Errors:</p> </li> <li>The test script attempts to find a specific element on the screen (like a button or input field) but cannot locate it within the allowed time.</li> <li> <p>Example: The script tries <code>findElementById('loginButton')</code> but the element's ID was recently changed to <code>submitLogin</code> by developers, or the element is inside an iframe and the script hasn't switched focus to it.</p> </li> <li> <p>Timeout Errors:</p> </li> <li>The script waits for a certain condition (e.g., an element to become visible, a page to fully load, a background process to finish) but exceeds the maximum allowed waiting time before that condition is met.</li> <li> <p>Example: Setting an explicit wait of 15 seconds (<code>waitForElementVisible(element, 15)</code>) for an element that, under certain conditions (like slow network), takes 20 seconds to appear.</p> </li> <li> <p>Integration Errors:</p> </li> <li>These relate to problems with communication between the automated test and external systems it depends on, such as APIs, databases, or other microservices.</li> <li> <p>Example: A test needs to fetch setup data from an API before running UI steps, but the API endpoint is down and returns a <code>503 Service Unavailable</code> error, preventing the test from proceeding correctly. Or, trying to verify data written to a database, but the database connection fails due to network issues.</p> </li> <li> <p>Flaky Tests:</p> </li> <li>These tests produce inconsistent results \u2013 sometimes passing, sometimes failing \u2013 without any apparent changes to the code or application. They often stem from timing issues (race conditions), environmental inconsistencies, or reliance on unstable test data.</li> <li> <p>Example: A test clicks an \"Add Item\" button and immediately checks the cart count. Sometimes it passes, but sometimes the check happens before the cart count visually updates on the screen, causing an intermittent failure. Adding a short wait for the count to update might fix it.</p> </li> <li> <p>Maintenance Errors:</p> </li> <li>When the application under test is updated (UI changes, functionality modifications, text label changes), existing test scripts might become outdated and fail if they haven't been updated accordingly to reflect these changes.</li> <li>Example: A test was written to verify the exact text 'Proceed to Checkout' on a button. After a release, the button text is changed to 'Continue to Payment', causing the existing assertion <code>verifyText(button, 'Proceed to Checkout')</code> to fail.</li> </ul> <p>Don't worry, you're not alone in figuring these out! This guide covers common approaches to tackle these issues.</p>"},{"location":"debugging/debugging/#let-your-code-editor-help-you","title":"Let Your Code Editor Help You","text":"<p>Pay attention to any hints your code editor (like VS Code, IntelliJ, etc.) gives you! Often, it will underline potential problems (usually in red or yellow). Hovering over these \"linting\" highlights provides clues about what might be wrong \u2013 it's often the first place to look for typos!</p>"},{"location":"debugging/debugging/#using-breakpoints-pausing-the-action","title":"Using Breakpoints: Pausing the Action","text":"<p>Breakpoints are incredibly helpful! They let you pause your test script at specific lines you choose. This allows you to step through the execution slowly, see what the values of variables are at that exact moment, and pinpoint where things start going differently than you expected. Think of it like pausing a video to look closely at a single frame. Mastering breakpoints is a key skill for effective debugging.</p>"},{"location":"debugging/debugging/#debugging-tools-for-your-specific-setup","title":"Debugging Tools for Your Specific Setup","text":"<p>Different tools and code editors have built-in features to make debugging easier. We'll explore how to use these in specific environments:</p> <ul> <li>How to Debug with Selenium</li> </ul> <p>Remember, debugging is a skill that grows with practice. It's okay to not know the answer right away, and asking questions is encouraged \u2013 we're all here to help each other succeed!</p>"},{"location":"debugging/playwright/","title":"Debugging Your C# Playwright Tests in VS Code: A Practical Guide","text":"<p>Author: Rofhiwa \"Ralph\" Matumba</p> <p>Welcome! If you're working with C# and Playwright for automated testing in Visual Studio Code, knowing how to debug effectively is a superpower. This guide will walk you through identifying and fixing issues in your tests, from simple typos to more complex problems.</p>"},{"location":"debugging/playwright/#what-youll-need","title":"What You'll Need","text":"<ul> <li>Visual Studio Code (VS Code): Your code editor.</li> <li>Working Playwright Setup: You should have Playwright installed for C#, and your tests should generally be runnable. Basic familiarity with running your tests is helpful.</li> </ul>"},{"location":"debugging/playwright/#example-scenario-investigating-a-failed-test-like-an-incorrect-locator","title":"Example Scenario: Investigating a Failed Test (Like an Incorrect Locator)","text":"<p>Imagine a test fails when run automatically (perhaps in a CI system like Jenkins). Your first step is usually to see if you can reproduce the failure on your own machine, where you have more tools to investigate.</p> <ol> <li>Run the Test Locally: Find the test file (<code>.cs</code>) containing the failed test and run it directly from VS Code.</li> <li> <p>Check the Report: After the test run finishes, view the results. Many teams use reporting tools like Allure or ExtentReports.</p> <ul> <li>Using specific batch files (in some setups): You might run batch files like <code>Generate Allure Report.bat</code> and then <code>Open Allure Report.bat</code>.</li> <li>The Goal: Open a detailed report that shows which tests passed or failed.</li> </ul> </li> <li> <p>Analyze the Failure in the Report: Inside the report (Allure, ExtentReports, console output, etc.), find the failed test. Reporting tools provide a good overview.</p> <ul> <li>Example using Allure: Click on a 'Suites' tab or find the specific test suite that contains the failure.      (This image shows an example Allure report overview)</li> </ul> </li> <li> <p>Drill Down into the Error Details: Click on the specific failed test case. The report provides details about why it failed. Look for:</p> <ul> <li>Error Message: A specific message indicating the problem (e.g., \"Element not found,\" \"Timeout,\" \"Assertion failed\").</li> <li>Stack Trace: A sequence of function calls leading up to the error, helping pinpoint where in the code the failure occurred.</li> <li>Screenshots/Videos: Playwright can often capture these automatically on failure, showing the state of the application when things went wrong.</li> <li>Comparison Details (for assertion failures): If the test failed because something wasn't as expected, the report often shows the difference.</li> </ul> <p>Example Failure Detail (Illustrative): (This image shows example details for a failed test in Allure)</p> <p>In this specific example, the <code>CustomersSmokeTest</code> failed with a custom message indicating a mismatch:</p> <p>```txt FAIL: Failed to verify Customers page </p> <p>Expected Menu: monitor , Retrieved Menu: monitor  Expected Sub-Menu: cucumbers , Retrieved Sub-Menu: customers  Expected First Item: cucumber name , Retrieved First Item: customer name</p> <p>Page Load Time: 28,36 seconds ```</p> <p>The report clearly shows the test expected the text <code>cucumbers</code> but actually found <code>customers</code>. This points to a likely typo in the test code or an incorrect requirement.</p> </li> <li> <p>Locate the Issue in Your Code: Based on the error message (like the text <code>cucumbers</code>), search your codebase.</p> <ul> <li> <p>Use VS Code's search (Ctrl+F). Searching for a unique part of the incorrect text (e.g., <code>cucumber</code>) is effective.  (VS Code's search bar appears near the top)</p> </li> <li> <p>The search results lead you to the line(s) in your test code responsible for the error.  (The search highlights occurrences of \"cucumber\" in the code)</p> </li> </ul> </li> <li> <p>Fix and Rerun: In this simple case, correcting the typo (changing <code>cucumbers</code> to <code>customers</code> in the test code's expectation or locator) and rerunning the test solves the issue.</p> </li> </ol>"},{"location":"debugging/playwright/#debugging-when-errors-arent-obvious-using-breakpoints","title":"Debugging When Errors Aren't Obvious (Using Breakpoints!)","text":"<p>Sometimes, the error message isn't clear, or the test fails for reasons that aren't immediately obvious from the report (like complex logic errors). This is where VS Code's debugger becomes essential.</p>"},{"location":"debugging/playwright/#running-tests-in-debug-mode","title":"Running Tests in Debug Mode","text":"<p>VS Code integrates nicely with the .NET testing framework.</p> <ol> <li>Find the Test Method: Locate the <code>[TestMethod]</code> (or similar attribute like <code>[Fact]</code> or <code>[Test]</code>) in your C# test file.</li> <li>Don't Just Run, Debug: You'll see a small \"play\" icon or text like \"Run Test\" next to the method definition. Instead of just clicking it, right-click the icon or text.</li> <li>Select \"Debug Test\": Choose the \"Debug Test\" option from the context menu. (Depending on your VS Code extensions and setup, you might see a dedicated \"debug\" icon directly).      (Shows the menu with 'Debug Test' option)</li> </ol> <p>Running in debug mode alone won't change much until you add breakpoints.</p>"},{"location":"debugging/playwright/#using-breakpoints","title":"Using Breakpoints","text":"<p>A breakpoint tells the debugger: \"Pause execution right here!\"</p> <ol> <li> <p>Set a Breakpoint: Click in the margin just to the left of the line number where you want execution to pause. A red dot will appear. Choose a line before the suspected problematic code executes.      (Red dot indicates a breakpoint set on a line number)</p> </li> <li> <p>Start Debugging: Run the test in Debug mode as described above.</p> </li> <li>Execution Pauses: When the debugger reaches the line with the breakpoint, execution will stop. The line will often be highlighted (e.g., in yellow), and a floating toolbar with debugging controls will appear.      (Shows the yellow highlight on the paused line and the debug controls)</li> </ol>"},{"location":"debugging/playwright/#understanding-the-debugging-controls","title":"Understanding the Debugging Controls","text":"<p>This toolbar lets you control the execution flow precisely:</p> <ul> <li>Continue (F5): Resumes running the code normally until it hits another breakpoint or the test finishes.</li> <li>Step Over (F10): Executes the current highlighted line completely and pauses on the next line in the same method. If the current line calls another method, Step Over executes that entire method without going inside it. Useful for: Executing a line without diving into its internal function calls.</li> <li>Step Into (F11): If the current line contains a method call, Step Into moves execution to the first line inside that called method. If it's not a method call, it behaves like Step Over. Useful for: Investigating the logic inside a specific function.</li> <li>Step Out (Shift+F11): If you've Stepped Into a method, Step Out continues execution until the current method finishes and returns to the line where it was called. Useful for: Quickly getting out of a function you're no longer interested in debugging line-by-line.</li> <li>Restart: Stops the current debug session and starts a new one from the beginning of the test.</li> <li>Stop (Shift+F5): Terminates the debugging session completely.</li> </ul> <p>Why Use These? By stepping through code line-by-line (Step Over/Into) and inspecting variable values (hover over them or use the 'Variables' panel in VS Code's Debug view), you can precisely track how your test logic executes and pinpoint where things go wrong, especially for complex logical errors.</p> <p>Feel free to share any other useful debugging techniques you discover!</p>"},{"location":"debugging/playwright/#reproducing-test-suite-runs-locally-mimicking-jenkins","title":"Reproducing Test Suite Runs Locally (Mimicking Jenkins)","text":"<p>Sometimes, a test passes when run individually but fails when run as part of a larger suite (like in Jenkins). This can happen due to shared state issues, environment differences, or tests interfering with each other. Reproducing the suite run locally helps diagnose these problems.</p> <p>The exact command depends heavily on your project setup, but here's an example showing how to run a specific test suite (<code>SmoketestsSuite</code>) targeting a specific environment (<code>INT</code>) using <code>dotnet test</code> with various parameters set via environment variables:</p> <ol> <li>Open Command Prompt (<code>cmd</code>) or a similar terminal. (Note: PowerShell might handle variable setting differently).</li> <li>Navigate to your repository's root directory.</li> <li>Set Environment Variables and Run:</li> </ol> <pre><code>REM Set environment variables specific to this run\nSET environment=INT\nSET testsuite=SmoketestsSuite\nSET testpack=SmoketestsSuiteINT.xlsx\nSET operatingSystem=windows\nSET recordVideo=false \n\nREM Run the tests using dotnet test, passing variables as parameters\ndotnet test --logger:junit --logger:html;LogFileName=HTMLReports\\HTMLReport.html ^\n --filter %testsuite% ^\n -- TestRunParameters.Parameter(name=\\\"operatingSystemArg\\\" , value=\\\"%operatingSystem%\\\") ^\n -- TestRunParameters.Parameter(name=\\\"environmentArg\\\" , value=\\\"%environment%\\\") ^\n -- TestRunParameters.Parameter(name=\\\"testPackArg\\\" , value=\\\"%testPack%\\\") ^\n -- TestRunParameters.Parameter(name=\\\"recordVideoArg\\\" , value=\\\"%recordVideo%\\\") ^\n .\\Test\\KeywordDrivenTestFramework.Tests\n</code></pre> <p>(Note: The <code>^</code> characters are used for line continuation in <code>cmd</code>)</p> <p>This command attempts to mimic how Jenkins might run the tests by:</p> <ul> <li>Setting environment variables (<code>SET ...</code>).</li> <li>Using <code>dotnet test</code> to execute tests.</li> <li>Specifying loggers (<code>--logger</code>).</li> <li>Filtering to run only the desired suite (<code>--filter %testsuite%</code>).</li> <li>Passing the environment variables into the test run context (<code>-- TestRunParameters...</code>).</li> <li>Targeting the specific test project (<code>.\\Test\\KeywordDrivenTestFramework.Tests</code>).</li> </ul> <p>Running tests this way helps uncover issues that only appear during full suite executions.</p> <p>Happy testing!</p>"},{"location":"debugging/selenium/","title":"Debugging Your Java Selenium Tests in NetBeans: A Practical Guide","text":"<p>Author: Rofhiwa \"Ralph\" Matumba</p> <p>Welcome! Working with Selenium and Java means you'll sometimes need to figure out why a test isn't behaving as expected. Debugging is a core skill, and this guide will help you get comfortable using NetBeans to find and fix issues in your Selenium tests.</p>"},{"location":"debugging/selenium/#what-youll-need","title":"What You'll Need","text":"<ul> <li>A Working Selenium Setup: Your Java project should be set up with Selenium, and you should be able to run your tests. Some basic familiarity with Java and Selenium concepts will be helpful.</li> <li>Apache NetBeans: Version 8.2 or later is recommended. This guide uses NetBeans 17, but the principles apply to other recent versions and similar enterprise-level Java IDEs (like IntelliJ IDEA or Eclipse) that support Java 8+.</li> </ul>"},{"location":"debugging/selenium/#example-scenario-investigating-a-failed-selenium-test","title":"Example Scenario: Investigating a Failed Selenium Test","text":"<p>Let's say a test passes on your machine but fails in your Continuous Integration (CI) environment (like Jenkins), or maybe it just started failing locally. The first step is to reproduce and investigate the failure in your development environment (NetBeans).</p> <ol> <li>Run the Test Locally: Identify the specific test method in your Java file (<code>.java</code>) that's failing and run it directly within NetBeans.</li> <li> <p>Locate the Test Report: After the run, find the generated test report. Many Selenium projects use tools like ExtentReports, TestNG reports, or Surefire reports.</p> <ul> <li>Example with ExtentReports: Navigate to the project's test report output folder (<code>KeywordDrivenTestReports</code>) and find the relevant HTML report file (<code>extentReport.html</code>).</li> <li>The Goal: Open the report to see a summary of test results.</li> </ul> </li> <li> <p>Analyze the Failure in the Report: Look for the test case marked as failed.</p> <p> (This image shows an example ExtentReport overview)</p> </li> <li> <p>Examine the Failure Details: Click on the failed test name to get more information. Pay attention to:</p> <ul> <li>Error Message/Exception: Java exceptions (like <code>NoSuchElementException</code>, <code>TimeoutException</code>, <code>AssertionError</code>) and specific error messages are crucial clues.</li> <li>Stack Trace: This shows the sequence of method calls leading to the error, helping you pinpoint the exact line in your code where the problem surfaced.</li> <li>Screenshots/Timestamps: Many reporting tools capture a screenshot at the point of failure, which is incredibly helpful for UI issues. Timestamps can help understand timing problems.</li> </ul> <p> (This image shows detailed results for a failed test, often including error messages)</p> <p>In this example report, the failure description indicates a problem occurred while trying to interact with the \"Customers\" tab.</p> </li> <li> <p>Find the Code: Use the information from the report (like the element description \"Customers tab\" or the specific exception) to search your code.</p> <ul> <li> <p>In NetBeans, press Ctrl+F to open the search bar (usually appears at the bottom).  (NetBeans search bar location)</p> </li> <li> <p>Searching for <code>Customers tab</code> (or a relevant part of the locator or error message) leads you to the relevant lines in your <code>.java</code> file.  (Search results highlighting the term in the code)</p> </li> </ul> </li> <li> <p>Identify and Fix: Inspect the highlighted code.</p> <ul> <li>In this specific example: A closer look reveals a typo in an XPath expression. The code was searching for <code>//a[contains(text(),'Cucumbers')]</code> instead of <code>//a[contains(text(),'Customers')]</code>. Selenium couldn't find the element because the text didn't match.  (Shows the code after fixing the XPath typo)</li> <li>Correcting the XPath typo and rerunning the test resolved this particular issue. Common issues found this way include incorrect locators (XPath, CSS selectors, IDs), typos in expected text, or incorrect assumptions about the application's state.</li> </ul> </li> </ol>"},{"location":"debugging/selenium/#debugging-when-errors-arent-obvious-using-netbeans-debugger","title":"Debugging When Errors Aren't Obvious (Using NetBeans Debugger)","text":"<p>Sometimes the report doesn't immediately tell you why something failed, especially with complex test logic or unexpected application behavior. This is where the NetBeans debugger shines.</p>"},{"location":"debugging/selenium/#running-tests-in-debug-mode","title":"Running Tests in Debug Mode","text":"<p>Instead of just running the test, you'll attach the debugger:</p> <ol> <li>Right-click on the specific test method name (or the test class) in your Java file.</li> <li>Select \"Debug Focused Test Method\" (or \"Debug Test File\" if debugging the whole class). Do not select \"Run Focused Test Method\".</li> </ol> <p> (Shows the right-click menu with 'Debug Focused Test Method')</p> <p>Simply starting in debug mode won't change how the test runs until you set breakpoints.</p>"},{"location":"debugging/selenium/#using-breakpoints","title":"Using Breakpoints","text":"<p>Breakpoints tell NetBeans where to pause the execution of your test.</p> <ol> <li> <p>Set a Breakpoint: Click in the left margin next to the line number where you want to pause. A pink/red square or icon will appear, often highlighting the line. Choose a line before the code you suspect is causing trouble.      (A breakpoint indicator appears next to the line number)</p> </li> <li> <p>Start Debugging: Run the test using \"Debug Focused Test Method\".</p> </li> <li>Execution Pauses: When the test execution reaches your breakpoint, it will pause. The line is usually highlighted (often in green), and the debugging toolbar appears (typically at the top).      (Shows the green highlight on the paused line and the debug toolbar)</li> </ol>"},{"location":"debugging/selenium/#understanding-the-netbeans-debugging-controls","title":"Understanding the NetBeans Debugging Controls","text":"<p>The debugging toolbar provides precise control over execution:</p> <ul> <li>Stop: Terminates the entire debug session.</li> <li>Pause: Manually pause execution if it's currently running.</li> <li>Continue (F5): Resumes running until the next breakpoint is hit or the test ends.</li> <li>Step Over (F8): Executes the current highlighted line fully. If it contains a method call, the entire method is executed without stepping into it. Pauses on the next line in the current method. Use this to move line-by-line within the current scope.</li> <li>Step Over Expression (Shift+F8): Executes only the next logical part (subexpression or method call) on the current line. Useful for complex lines with multiple chained method calls.</li> <li>Step Into (F7): If the current line calls one of your methods, execution jumps to the first line inside that method. Use this to dive deeper into your own functions.</li> <li>Step Out (Ctrl+F7): Continues execution until the current method finishes and returns to the line where it was called. Use this to quickly exit a method you've stepped into.</li> </ul> <p>Why Use the Debugger? By pausing execution, you can:</p> <ul> <li>Inspect Variables: Check the current values of variables in the 'Variables' window in NetBeans.</li> <li>Evaluate Expressions: Use the 'Watches' window to evaluate custom expressions.</li> <li>Trace Logic: Step through the code line-by-line to understand exactly how your test logic flows. This is invaluable for diagnosing complex logical errors.</li> </ul> <p>If you discover other effective debugging strategies within NetBeans for Selenium, feel free to share them!</p> <p>Happy testing!</p>"},{"location":"getting-started/api-testing/pester/","title":"Getting Started with Pester for PowerShell Testing","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Welcome! Pester is a fantastic testing framework designed specifically for PowerShell. It helps you write automated tests for your PowerShell scripts, functions, and modules, ensuring they work as expected. This guide will walk you through setting up Pester, particularly focusing on the configuration needed for the <code>API_Tests_Pester</code> project.</p>"},{"location":"getting-started/api-testing/pester/#step-1-allowing-powershell-scripts-to-run-execution-policy","title":"Step 1: Allowing PowerShell Scripts to Run (Execution Policy)","text":"<p>First, we need to make sure PowerShell will allow you to run scripts, including Pester tests. PowerShell has a security feature called \"Execution Policy\" to prevent potentially harmful scripts from running unintentionally.</p> <ul> <li>Already Done This? If you've previously set up Scoop and Allure following the Playwright tutorial (Scoop and Allure section), you likely already have the correct execution policy set and can skip to the next section.</li> <li> <p>Need to Check/Set it? Follow these steps:</p> <ol> <li>Open PowerShell as an Administrator. (Right-click the PowerShell icon and choose \"Run as administrator\"). This is important because changing execution policies requires admin rights.</li> <li> <p>Check your current policy: Type the following command and press Enter:</p> <p><code>powershell Get-ExecutionPolicy</code></p> </li> <li> <p>Understand the Output: You'll see one of these common policies:</p> <ul> <li><code>Restricted</code>: Default setting. Doesn't run scripts.</li> <li><code>AllSigned</code>: Only runs scripts signed by a trusted publisher.</li> <li><code>RemoteSigned</code>: Allows local scripts to run, but scripts downloaded from the internet must be signed by a trusted publisher. This is generally the recommended setting for development.</li> <li><code>Unrestricted</code>: Runs all scripts, but warns you if running scripts downloaded from the internet.</li> <li><code>Bypass</code>: Runs everything with no warnings or prompts.</li> </ul> </li> <li> <p>Set the Policy (If Needed): To allow local scripts (like your Pester tests) and signed remote scripts to run, execute this command in the administrator PowerShell window:</p> <p><code>powershell Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force</code></p> <ul> <li><code>-Scope CurrentUser</code>: This applies the policy only to your user account, which is safer than changing it system-wide.</li> <li><code>-Force</code>: Suppresses confirmation prompts.<ol> <li>Verify the Change: Run <code>Get-ExecutionPolicy</code> again to confirm it now shows <code>RemoteSigned</code>.</li> <li>Keep the Admin Window: Please keep the administrator PowerShell window open for the next step.</li> </ol> </li> </ul> </li> </ol> </li> </ul>"},{"location":"getting-started/api-testing/pester/#step-2-installing-pester-the-right-way","title":"Step 2: Installing Pester (The Right Way)","text":"<p>Now, let's install Pester itself.</p> <ol> <li> <p>Attempt Standard Installation: In your administrator PowerShell window, try installing Pester using the standard command:</p> <p><code>powershell Install-Module -Name Pester -Force -SkipPublisherCheck</code></p> <ul> <li><code>-Force</code>: Installs even if a version is already present.</li> <li><code>-SkipPublisherCheck</code>: Often needed if running behind certain proxies or firewalls.</li> </ul> </li> <li> <p>Check for Conflicts (Important!): Sometimes, Windows includes an older, built-in version of Pester that can conflict with the newer version required by test projects like <code>API_Tests_Pester</code>. After running the install command, verify you have the latest version (see \"Verifying Pester Installation\" below). If verification fails or you encounter issues later specifically related to Pester version conflicts, you might need the more advanced steps below.</p> </li> <li> <p>(Advanced - Use Only If Necessary): Forcefully Replacing the System Pester:</p> <ul> <li>Caution: The following commands forcefully take ownership of and remove the system-installed Pester module. This is generally not recommended unless you are sure the standard <code>Install-Module -Force</code> or <code>Update-Module</code> did not correctly override the built-in version and it's causing compatibility problems with your tests. Use with care.</li> <li> <p>If you've confirmed the standard install isn't working due to the built-in module, run these commands line-by-line in the administrator PowerShell window:</p> <p>```powershell</p> </li> <li> <p>This complex process only needs to be done once if you encounter this specific conflict.</p> </li> </ul> </li> <li> <p>Updating Pester in the Future: To update Pester later, simply run:</p> <p><code>powershell Update-Module -Name Pester</code></p> </li> </ol>"},{"location":"getting-started/api-testing/pester/#define-path-to-the-potentially-problematic-built-in-module","title":"Define path to the potentially problematic built-in module","text":"<p>$module = \"C:\\Program Files\\WindowsPowerShell\\Modules\\Pester\"</p>"},{"location":"getting-started/api-testing/pester/#take-ownership-of-the-folder-requires-admin-rights","title":"Take ownership of the folder (requires admin rights)","text":"<p>&amp; takeown.exe /F $module /A /R</p>"},{"location":"getting-started/api-testing/pester/#reset-permissions-on-the-folder","title":"Reset permissions on the folder","text":"<p>&amp; icacls.exe $module /reset</p>"},{"location":"getting-started/api-testing/pester/#grant-full-control-to-administrators-group-s-1-5-32-544-is-the-sid-for-administrators","title":"Grant Full Control to Administrators group (S-1-5-32-544 is the SID for Administrators)","text":"<p>&amp; icacls.exe $module /grant \"*S-1-5-32-544:F\" /inheritance:d /T</p>"},{"location":"getting-started/api-testing/pester/#forcefully-remove-the-old-module-folder","title":"Forcefully remove the old module folder","text":"<p>Remove-Item -Path $module -Recurse -Force -Confirm:$false</p>"},{"location":"getting-started/api-testing/pester/#now-try-installing-the-latest-pester-cleanly","title":"Now, try installing the latest Pester cleanly","text":"<p>Install-Module -Name Pester -Force -SkipPublisherCheck ```</p>"},{"location":"getting-started/api-testing/pester/#verifying-pester-installation","title":"Verifying Pester Installation","text":"<p>Confirm Pester is installed correctly and check its version by running this in any PowerShell window (admin rights not needed for verification):</p> <pre><code>Get-Module Pester -ListAvailable | Select-Object Version, Path\n# Or simply:\npester --version\n</code></pre> <p>If you see a version number (ideally v5 or later for modern features), you're good to go! If not, carefully review the installation steps or check the official Pester installation guide.</p>"},{"location":"getting-started/api-testing/pester/#step-3-running-the-api-pester-tests-specific-project","title":"Step 3: Running the API Pester Tests (Specific Project)","text":"<p>This section details how to run tests from a specific repository that uses Pester.</p> <ol> <li> <p>Get the Code: Clone the <code>API_Tests_Pester</code> repository to a location on your computer (using <code>D:\\</code> is suggested, but any location works). You can find it here: API Tests Pester (Note: You'll need access to this Azure DevOps repository). Use <code>git clone &lt;repository_url&gt;</code> in PowerShell or your preferred Git tool.</p> </li> <li> <p>Navigate to the Repository: Open PowerShell (a regular, non-admin window is fine now) and change directory (<code>cd</code>) into the cloned <code>API_Tests_Pester</code> folder.</p> <p><code>powershell cd D:\\path\\to\\cloned\\repo\\API_Tests_Pester</code></p> </li> <li> <p>Install Node.js Dependencies: This particular project also uses Node.js for some tooling or setup.</p> <ul> <li>Need Node.js? If you don't have Node.js installed, refer to the setup instructions (e.g., the Chrome, ChromeDriver, and Node.js section mentioned in the Selenium tutorial, or download from nodejs.org).</li> <li> <p>Install Project Dependencies: Once Node.js is ready, run the following command in the repository's root directory. This downloads the necessary Node.js packages defined in the project's <code>package.json</code> file.</p> <p><code>powershell npm install</code></p> </li> </ul> </li> <li> <p>Run the Pester Tests: The repository contains specific scripts to execute the tests. To run the suite configured for the 'INT' environment, execute:</p> <p><code>powershell .\\INT_run.ps1</code></p> </li> <li> <p>Interpreting the Output &amp; Caveat: Pester will start running the tests defined in the project. You should see output indicating tests starting, passing (<code>[+]</code>), or failing (<code>[-]</code>).</p> <p> (Shows example console output during a Pester test run)</p> <ul> <li>Important Note (as of April 15, 2025): Please be aware that the tests within this specific <code>API_Tests_Pester</code> repository were unstable. While Pester itself should function correctly after the setup described above, the test results from <code>.\\INT_run.ps1</code> might show inconsistencies or failures unrelated to your setup. If the reliability of these specific tests improves, this note should be updated.</li> </ul> </li> </ol> <p>You've now successfully set up Pester and run tests from the target repository!</p> <p>Happy testing!</p>"},{"location":"getting-started/api-testing/pytest/","title":"Getting Started with Pytest for Python Testing","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Welcome to Pytest! It's a very popular and powerful testing framework for Python that makes writing and running tests straightforward and efficient. This guide will help you set up your Python environment, install Pytest, and get ready to run tests, specifically using the <code>MiXIntegrate</code> project as an example.</p>"},{"location":"getting-started/api-testing/pytest/#step-1-checking-your-python-installation","title":"Step 1: Checking Your Python Installation","text":"<p>Pytest requires Python. Many systems, especially macOS and Linux, come with Python pre-installed. Let's check if you have Python 3, which is needed for modern development.</p> <ol> <li>Open your terminal (PowerShell on Windows, Terminal on macOS/Linux).</li> <li> <p>Run the version check command:</p> <p>```bash python --version</p> </li> <li> <p>Check the result: If you see a version number like <code>Python 3.x.x</code> (version 3.6 or higher is recommended), you're ready to proceed! If not, or if you want the latest version, follow one of the installation methods below.</p> </li> </ol>"},{"location":"getting-started/api-testing/pytest/#or-sometimes-on-systems-with-both-python-2-and-3","title":"Or sometimes on systems with both Python 2 and 3:","text":"<p>python3 --version ```</p>"},{"location":"getting-started/api-testing/pytest/#installing-python-if-needed","title":"Installing Python (If Needed)","text":"<p>Here are common ways to install Python on Windows:</p>"},{"location":"getting-started/api-testing/pytest/#method-1-using-winget-windows-package-manager","title":"Method 1: Using <code>winget</code> (Windows Package Manager)","text":"<ul> <li><code>winget</code> is a command-line tool built into recent Windows versions for easy software installation.</li> <li> <p>In PowerShell, run:</p> <p><code>bash winget install Python.Python.3</code></p> </li> <li> <p>This command finds the latest stable Python 3 release from the official source and installs it. You might be prompted for permissions \u2013 answering <code>[A] Yes To All</code> is usually fine. <code>winget</code> typically handles adding Python to your PATH automatically.</p> </li> </ul>"},{"location":"getting-started/api-testing/pytest/#method-2-using-the-official-installer","title":"Method 2: Using the Official Installer","text":"<ul> <li>This is the standard method and works on all systems.</li> <li>Go to the official Python downloads page: python.org/downloads/</li> <li>Download the latest stable installer for your operating system (Windows, macOS).</li> <li>Run the installer. Crucially: During installation (especially on Windows), check the box that says \"Add Python 3.x to PATH\". This allows you to run <code>python</code> from any terminal window. Use the default installation settings otherwise.</li> </ul> <p>Verify After Installing: Close and reopen your terminal/PowerShell window, then run <code>python --version</code> (or <code>python3 --version</code>) again to confirm the installation worked and the command is recognized. If the command isn't found, you may need to manually add Python's installation directory to your system's PATH environment variable.</p>"},{"location":"getting-started/api-testing/pytest/#step-2-getting-the-project-code","title":"Step 2: Getting the Project Code","text":"<p>Now, let's get the code for the specific project that uses Pytest.</p> <ol> <li> <p>Clone the Repository: Use Git to clone the <code>MiXIntegrate</code> repository. You'll need access permissions for this specific Azure DevOps repository.</p> <p>```bash</p> </li> <li> <p>IMPORTANT Folder Name: Ensure the folder created by cloning is named exactly <code>MiXIntegrate</code> (case-sensitive). Some scripts or configurations within the project rely on this specific name. If Git clones it to a different name, rename the folder immediately.</p> </li> </ol>"},{"location":"getting-started/api-testing/pytest/#example-using-git-command-line","title":"Example using Git command line:","text":"<p>git clone https://MiXTelematics@dev.azure.com/MiXTelematics/AutomatedTests/_git/MiXIntegrate ```</p>"},{"location":"getting-started/api-testing/pytest/#step-3-installing-project-dependencies-with-pip","title":"Step 3: Installing Project Dependencies with <code>pip</code>","text":"<p>Python projects rely on external libraries (packages) for various functionalities. <code>pip</code> is Python's standard package manager used to install these.</p> <ol> <li> <p>Navigate to the Project Directory: Open your terminal/PowerShell and change directory (<code>cd</code>) into the <code>MiXIntegrate</code> folder you just cloned.</p> <p><code>bash cd path\\to\\your\\cloned\\repo\\MiXIntegrate</code></p> </li> <li> <p>(Recommended Best Practice) Use a Virtual Environment: Before installing packages, it's highly recommended to create a virtual environment. This creates an isolated space for your project's dependencies, preventing conflicts with other Python projects on your system.</p> <p>```bash</p> </li> <li> <p>Install from <code>requirements.txt</code>: Most Python projects list their dependencies in a file named <code>requirements.txt</code>. This project includes one. To install everything listed in that file, run:</p> <p><code>bash pip install -r requirements.txt</code></p> <ul> <li><code>pip</code>: The Python package installer command.</li> <li><code>install</code>: The action to perform.</li> <li><code>-r requirements.txt</code>: Tells <code>pip</code> to read package names and versions from the specified file and install them.</li> </ul> </li> <li> <p>Handling Missing Packages Manually (If Needed): Occasionally, you might run a script and get a <code>ModuleNotFoundError</code>, meaning a specific library wasn't listed or installed.</p> <ul> <li>Example Error: </li> <li>This error clearly states Python couldn't find the <code>Flask</code> module.</li> <li> <p>Solution: Install it directly using <code>pip</code>:</p> <p><code>bash pip install flask</code></p> <p>(Replace <code>flask</code> with the actual missing module name). Then try running your script again. If you install a package manually that the project needs, consider adding it to the <code>requirements.txt</code> file.</p> </li> </ul> </li> </ol>"},{"location":"getting-started/api-testing/pytest/#create-a-virtual-environment-common-convention-is-to-name-it-venv-or-venv","title":"Create a virtual environment (common convention is to name it .venv or venv)","text":"<p>python -m venv .venv</p>"},{"location":"getting-started/api-testing/pytest/#activate-the-virtual-environment","title":"Activate the virtual environment","text":""},{"location":"getting-started/api-testing/pytest/#on-windows-powershell","title":"On Windows (PowerShell):","text":"<p>..venv\\Scripts\\Activate.ps1</p>"},{"location":"getting-started/api-testing/pytest/#on-windows-cmdexe","title":"On Windows (cmd.exe):","text":"<p>..venv\\Scripts\\activate.bat</p>"},{"location":"getting-started/api-testing/pytest/#on-macoslinux-bashzsh","title":"On macOS/Linux (bash/zsh):","text":"<p>source .venv/bin/activate ```</p> <p>Your terminal prompt will usually change to show <code>(.venv)</code> when active. Activate it each time you work on the project.</p>"},{"location":"getting-started/api-testing/pytest/#step-4-verifying-pytest-installation","title":"Step 4: Verifying Pytest Installation","text":"<p>Since Pytest is likely listed in the <code>requirements.txt</code> file, the previous <code>pip install -r</code> command should have installed it. Let's verify.</p> <ol> <li> <p>Open the Python Interactive Shell: In your terminal (with your virtual environment active if used), type:</p> <p><code>bash python</code></p> <p>You should see <code>&gt;&gt;&gt;</code> indicating you're in the Python interpreter. 2. Try Importing Pytest: Type the following and press Enter:</p> <p><code>python import pytest</code></p> </li> <li> <p>Check the Result: If you see no error message and just get the <code>&gt;&gt;&gt;</code> prompt back, it means Python successfully found and imported the Pytest library. Success!</p> </li> <li>Exit the Python Shell: Type <code>exit()</code> and press Enter to return to your regular terminal prompt.</li> </ol>"},{"location":"getting-started/api-testing/pytest/#step-5-running-your-first-pytest-test-mixintegrate-example","title":"Step 5: Running Your First Pytest Test (MiXIntegrate Example)","text":"<p>With Python, project dependencies, and Pytest ready, you can now run the tests included in the <code>MiXIntegrate</code> repository.</p> <ol> <li>Ensure you are in the <code>MiXIntegrate</code> directory in your terminal (and your virtual environment is active if used).</li> <li> <p>Run the UAT Tests: Use the following command (this specific command structure is defined by how the <code>MiXIntegrate</code> project is set up):</p> <p><code>bash python -m pytest TestMarshall.py --testfile \"Test Packs\\UAT PACK.xlsx\"</code></p> <ul> <li><code>python -m pytest</code>: Runs Pytest as a module, ensuring it uses the correct Python environment.</li> <li><code>TestMarshall.py</code>: The main test execution script or file entry point for this project.</li> <li><code>--testfile \"Test Packs\\UAT PACK.xlsx\"</code>: A custom argument passed to the tests, specifying the test pack configuration (in this case, an Excel file for the UAT environment).</li> </ul> </li> <li> <p>Observe the Output: Pytest will discover and run the tests. You should see output indicating test progress (dots <code>.</code> for pass, <code>F</code> for fail, <code>E</code> for error, <code>s</code> for skip) and a summary at the end.</p> <p> (Shows typical console output from a Pytest run, including a summary)</p> </li> </ol> <p>If you see output similar to the image, indicating tests were run and summarized, congratulations! Your environment is set up correctly, and you're ready to work with Pytest in this project. If you encounter errors, carefully review the setup steps, error messages, and project-specific documentation.</p>"},{"location":"getting-started/mobile-testing/android/","title":"Getting Started with Android Testing using Appium, Java &amp; Maven","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Welcome to the world of Android automated testing! This guide will walk you through setting up your environment using Appium, Java (specifically a recent JDK), Maven, and Android Studio. While the setup involves several components, following these steps will get you ready to run tests for the <code>MobileTests</code> project.</p> <p>Important Note! (As of April 15, 2025) This tutorial describes setup for a test pack that was under active development. Some details or project specifics might evolve, so always check for the latest project documentation if available.</p>"},{"location":"getting-started/mobile-testing/android/#step-1-install-the-required-java-development-kit-jdk","title":"Step 1: Install the Required Java Development Kit (JDK)","text":"<p>This project requires a recent JDK version, specifically OpenJDK 24 (as of April 2025).</p> <ol> <li>Download OpenJDK 24: Get it from the official source: Download OpenJDK 24 (Download the ZIP archive for Windows).</li> <li>Extract: Unzip the downloaded file to a suitable location on your computer (e.g., <code>D:\\jdks\\openjdk-24</code>). Remember this path, as you'll need it later.</li> </ol>"},{"location":"getting-started/mobile-testing/android/#managing-multiple-jdks-java_home","title":"Managing Multiple JDKs (<code>JAVA_HOME</code>)","text":"<p>You might have other Java versions installed (like JDK 8 for web testing). To ensure this project uses JDK 24 without disrupting your other setups, you need to temporarily tell the system where to find JDK 24 when running these specific tests. The <code>JAVA_HOME</code> environment variable does this.</p> <p>Running Tests with a Batch Script (One Method):</p> <p>Here's a template for a Windows Batch (<code>.bat</code>) script that temporarily sets <code>JAVA_HOME</code> to your JDK 24 path, runs the Maven tests, and then sets <code>JAVA_HOME</code> back.</p> <p>\u26a0\ufe0f SECURITY WARNING: NEVER hardcode passwords or API keys directly in scripts! Use environment variables for credentials. You must set these variables in your system before running the script.</p> <pre><code>@echo off\nECHO Setting environment for Mobile Tests...\n\nREM --- SET YOUR CREDENTIALS SECURELY AS ENVIRONMENT VARIABLES ---\nREM Example (do this in System Properties -&gt; Environment Variables, NOT here):\nREM SET LAMBDATEST_USER=your_lambdatest_username\nREM SET LAMBDATEST_PWD=your_lambdatest_access_key\n\nREM --- CONFIGURE YOUR JDK PATHS HERE ---\nSET \"JDK24_PATH=D:\\jdks\\openjdk-24\"  REM &lt;-- *** CHANGE THIS to your actual JDK 24 path ***\nSET \"JDK8_PATH=C:\\path\\to\\your\\jdk8\" REM &lt;-- *** CHANGE THIS to your actual JDK 8 path ***\n\nREM Temporarily set JAVA_HOME to JDK 24\nECHO Setting JAVA_HOME to %JDK24_PATH%\nSET \"JAVA_HOME=%JDK24_PATH%\"\n\nREM Verify Java version (optional)\nREM java -version\n\nREM Run the Maven tests (Maven needs to be in your system PATH)\nECHO Running Maven tests...\nmvn test\n\nREM Restore JAVA_HOME to JDK 8 (or your default)\nECHO Restoring JAVA_HOME to %JDK8_PATH%\nSET \"JAVA_HOME=%JDK8_PATH%\"\n\nECHO Done.\npause\n</code></pre> <p>To use this script:</p> <ol> <li>Copy the text above.</li> <li>Set your LambdaTest username and access key as persistent Environment Variables in your Windows System Properties. Search for \"Edit the system environment variables\". Do NOT put them directly in the script.</li> <li>Modify the <code>JDK24_PATH</code> and <code>JDK8_PATH</code> lines in the script to match the actual locations on your computer.</li> <li>Save the file with a <code>.bat</code> extension (e.g., <code>run_mobile_tests.bat</code>).</li> <li>Double-click the <code>.bat</code> file to run the tests using JDK 24.</li> </ol>"},{"location":"getting-started/mobile-testing/android/#step-2-install-android-studio-sdk","title":"Step 2: Install Android Studio &amp; SDK","text":"<p>Android Studio is Google's official IDE for Android development. We need it for the Android Software Development Kit (SDK), virtual devices, and other essential tools.</p> <ol> <li>Download Android Studio: Get the latest version (referred to as \"Meerkat\" around April 2025) from the official site: Download Android Studio</li> <li>Install: Run the installer, accepting the default settings.</li> <li>Setup Wizard:<ul> <li>When asked about usage statistics, choosing \"Don't Send\" is fine.</li> <li>Select the \"Standard\" installation type.</li> </ul> </li> <li>Install Specific SDK Components: Once Android Studio opens to the \"Welcome\" screen:<ul> <li>Click \"More Actions\" (bottom right) -&gt; \"SDK Manager\".</li> <li>SDK Platforms Tab: Ensure Android 7.1.1 (Nougat) is checked. This installs the platform version the tests might target or interact with. Click Apply/OK if you check it.</li> <li>SDK Tools Tab:<ul> <li>Uncheck \"Hide Obsolete Packages\" at the bottom.</li> <li>Check the box for Android SDK Tools (Obsolete). This is needed for the <code>uiautomatorviewer</code> tool, which helps inspect app elements and find their locators (like XPaths) for Appium.</li> <li>Click \"Apply\" or \"OK\" to install the selected components.</li> </ul> </li> </ul> </li> </ol> <p> (Shows the SDK Manager)</p>"},{"location":"getting-started/mobile-testing/android/#creating-an-android-virtual-device-avd","title":"Creating an Android Virtual Device (AVD)","text":"<p>An AVD (or emulator) lets you run an Android device simulation on your computer.</p> <ol> <li>From the \"Welcome to Android Studio\" window: \"More Actions\" -&gt; \"Virtual Device Manager\".</li> <li>Click the <code>+</code> (Create device) button.</li> <li>Choose a device definition (e.g., a Pixel model) -&gt; \"Next\".</li> <li>Select a system image (like Android 7.1.1 if available, or another API level) -&gt; \"Next\". You might need to download the system image first.</li> <li>Review the configuration and click \"Finish\". You can now launch this virtual device from the Virtual Device Manager.</li> </ol>"},{"location":"getting-started/mobile-testing/android/#step-3-install-apache-maven","title":"Step 3: Install Apache Maven","text":"<p>Maven is a powerful build tool for Java projects. It manages dependencies, compiles code, runs tests, and packages the application. It's used here to ensure tests run consistently locally and potentially on cloud platforms like LambdaTest.</p> <ol> <li>Download Maven: Get the latest Binary ZIP archive (e.g., <code>apache-maven-3.9.9</code> as of April 2025) from the official site: Download Maven</li> <li>Extract: Unzip the downloaded file to a stable location (e.g., <code>D:\\tools\\apache-maven-3.9.9</code>).</li> <li>Add Maven to PATH: This is crucial! You need to add Maven's <code>bin</code> directory to your system's PATH environment variable so you can run <code>mvn</code> from any terminal.<ul> <li>Find the path to the <code>bin</code> folder inside where you extracted Maven (e.g., <code>D:\\tools\\apache-maven-3.9.9\\bin</code>).</li> <li>Search Windows for \"Edit the system environment variables\", open it, click \"Environment Variables...\", select the \"Path\" variable under \"System variables\" (or \"User variables\"), click \"Edit...\", click \"New\", and paste the full path to Maven's <code>bin</code> directory. Click OK on all dialogs.</li> <li>Verify by opening a new terminal window and typing <code>mvn -version</code>. You should see Maven's version information.</li> </ul> </li> </ol>"},{"location":"getting-started/mobile-testing/android/#step-4-install-appium","title":"Step 4: Install Appium","text":"<p>Appium is the automation framework that bridges your test scripts (Java) with the Android application.</p> <ol> <li> <p>Install Appium Server: This requires Node.js and npm (Node Package Manager). If you don't have them, install Node.js first (visit nodejs.org). Then, open your terminal/PowerShell and run:</p> <p><code>powershell npm install -g appium</code></p> <ul> <li><code>-g</code> installs Appium globally so you can run it from anywhere.</li> <li>Install the Android Driver (UIAutomator2): Appium needs specific drivers for different platforms. For modern Android testing, install the UIAutomator2 driver:</li> </ul> <p><code>powershell appium driver install uiautomator2</code></p> </li> </ol>"},{"location":"getting-started/mobile-testing/android/#step-5-get-the-project-code","title":"Step 5: Get the Project Code","text":"<p>Clone the specific repository containing the mobile tests.</p> <ol> <li> <p>Clone: Use Git to clone the <code>MobileTests</code> repository (ensure you have access permissions):</p> <p><code>bash git clone https://MiXTelematics@dev.azure.com/MiXTelematics/AutomatedTests/_git/MobileTests</code></p> <ul> <li>Important: Make sure you clone <code>MobileTests</code> and not the similarly named <code>MobileRegression</code> repository if that exists.</li> </ul> </li> </ol>"},{"location":"getting-started/mobile-testing/android/#step-6-running-the-mobile-tests","title":"Step 6: Running the Mobile Tests","text":"<p>Now, let's put it all together to run a test locally.</p> <ol> <li>Start Your Android Device:<ul> <li>Launch the AVD you created earlier from the Android Studio Virtual Device Manager. Wait for it to fully boot up.</li> <li>OR Connect a physical Android device via USB cable. Make sure USB Debugging is enabled in the Developer Options on the device.</li> </ul> </li> <li> <p>Start the Appium Server: Open a new terminal/PowerShell window (keep it separate) and run:</p> <p><code>powershell appium --relaxed-security --base-path /wd/hub</code></p> <ul> <li><code>--relaxed-security</code>: May be needed to enable certain automation features. Understand the security implications if using this flag in sensitive environments.</li> <li><code>--base-path /wd/hub</code>: Standard base path for WebDriver-compatible clients.</li> <li>Timing is important: Ensure the AVD is fully running before you start the Appium server. Appium needs to detect the device.</li> <li>Configure for Local Execution (Modify Code):</li> <li>Open the cloned <code>MobileTests</code> repository in your IDE (like VS Code or IntelliJ).</li> <li>Navigate to the file: <code>src/test/java/com/mixtelematics/automatedtesting/AppTest.java</code>.</li> <li>Find the test method <code>testLoginCorrectCredentials()</code>. Inside this method, locate the call to a function named <code>startDriver()</code>.</li> <li> <p>This <code>startDriver()</code> function takes a boolean <code>remote</code> parameter. Change its value to <code>false</code>:</p> <p><code>java // Example change: startDriver(remote: false); // Set remote flag to false for local run</code></p> <ul> <li>Why? Setting <code>remote</code> to <code>false</code> tells the test framework to connect to the local Appium server (at <code>http://127.0.0.1:4723/wd/hub</code> by default) instead of a remote cloud service like LambdaTest. This is necessary for running against your local emulator or device. Remember to change it back if you need to run remotely later.</li> <li>Execute the Tests: You have two main options:<ul> <li>Option A: Using the Batch Script:</li> </ul> </li> <li>Make sure you've set your LambdaTest credentials as environment variables (as described in Step 1).</li> <li>Make sure the JDK paths in the script are correct.</li> <li>Double-click the <code>.bat</code> file you created earlier. It will set <code>JAVA_HOME</code> to JDK 24 and run <code>mvn test</code>.<ul> <li>Option B: Using VS Code Java Runtime Configuration:</li> </ul> </li> <li>Open the project in VS Code.</li> <li>Press Ctrl+Shift+P to open the command palette.</li> <li>Type <code>Java: Configure Java Runtime</code>.</li> <li>Under \"Project JDKs\", ensure the <code>MobileTests</code> project is configured to use your installed JDK 24. You might need to add it if it's not listed.</li> <li>Open the <code>AppTest.java</code> file.</li> <li>Click the \"Run Test\" or \"Debug Test\" icon/link that appears next to the <code>testLoginCorrectCredentials()</code> method definition (or another test method). This runs the test directly using the JDK configured in VS Code.</li> </ul> </li> </ul> </li> <li> <p>Check Output: Observe the terminal where you ran <code>mvn test</code> or the VS Code test output. Look for test results. If you encounter a <code>NullPointerException</code> or connection errors, double-check all previous steps, especially ensuring the AVD/device is running, Appium server started correctly after the device, and the <code>remote</code> flag is set to <code>false</code>.</p> </li> </ol> <p>You should now have a working setup for running these Android tests locally!</p> <p>Happy testing!</p>"},{"location":"getting-started/web-testing/playwright-linux/","title":"Getting Started with Playwright &amp; C# on Linux (Ubuntu)","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Welcome! This guide will walk you through setting up your Ubuntu Linux environment to run automated tests using Playwright with C#. This involves installing several tools and dependencies, but following these steps will get you ready.</p>"},{"location":"getting-started/web-testing/playwright-linux/#prerequisites-setting-up-your-ubuntu-environment","title":"Prerequisites: Setting Up Your Ubuntu Environment","text":"<p>Let's install the core software needed. You'll need administrator privileges (<code>sudo</code>) for some commands.</p>"},{"location":"getting-started/web-testing/playwright-linux/#1-microsoft-net-runtime-sdk","title":"1. Microsoft .NET Runtime &amp; SDK","text":"<p>Playwright for C# runs on .NET. This project targets .NET 6.0.</p> <ul> <li> <p>Install .NET 6: Open your Terminal and run the following commands. The first updates your package list, the second installs the .NET 6 SDK.</p> <p><code>bash sudo apt-get update &amp;&amp; sudo apt-get install -y dotnet-sdk-6.0</code></p> </li> <li> <p>Verify (Optional): You can check the installation by running <code>dotnet --list-sdks</code>.</p> </li> </ul>"},{"location":"getting-started/web-testing/playwright-linux/#2-visual-studio-code-vs-code","title":"2. Visual Studio Code (VS Code)","text":"<p>You need a code editor or Integrated Development Environment (IDE) to work with the C# test code. VS Code is a popular choice.</p> <ul> <li>Install VS Code: Download the <code>.deb</code> package for Debian/Ubuntu from the official website: Download VS Code</li> <li> <p>Install it using the command line (replace <code>&lt;path-to-deb-file&gt;</code> with the actual path to the downloaded file):</p> <p><code>bash sudo apt install &lt;path-to-deb-file&gt;.deb</code></p> <p>(Alternatively, you might be able to double-click the <code>.deb</code> file to install it via the Software Center).</p> </li> </ul>"},{"location":"getting-started/web-testing/playwright-linux/#3-nodejs-and-npm","title":"3. Node.js and npm","text":"<p>Playwright uses Node.js's package manager (npm) for installation and managing browser binaries.</p> <ul> <li> <p>Install Node.js and npm: A common way on Ubuntu is using NodeSource repositories for up-to-date versions. Replace <code>18.x</code> with the desired LTS version (e.g., 20.x):</p> <p>```bash</p> </li> <li> <p>Verify (Optional): Check versions using <code>node -v</code> and <code>npm -v</code>.</p> </li> </ul>"},{"location":"getting-started/web-testing/playwright-linux/#download-and-run-the-nodesource-setup-script","title":"Download and run the NodeSource setup script","text":"<p>curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -</p>"},{"location":"getting-started/web-testing/playwright-linux/#install-nodejs-which-includes-npm","title":"Install Node.js (which includes npm)","text":"<p>sudo apt-get install -y nodejs ```</p>"},{"location":"getting-started/web-testing/playwright-linux/#4-powershell","title":"4. PowerShell","text":"<p>Some scripts within this specific test project require PowerShell to run.</p> <ul> <li> <p>Install PowerShell: Use the <code>snap</code> package manager (pre-installed on recent Ubuntu versions):</p> <p><code>bash sudo snap install powershell --classic</code></p> </li> </ul>"},{"location":"getting-started/web-testing/playwright-linux/#5-homebrew-and-allure-for-reporting","title":"5. Homebrew and Allure (for Reporting)","text":"<p>Allure is a tool used to generate detailed test reports. This project uses Homebrew, a package manager popular on macOS but also available for Linux, to install it.</p> <ul> <li> <p>Install Homebrew: Run this command in your terminal. It downloads and executes the official installation script:</p> <p><code>bash     /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code></p> </li> </ul> <p>Follow the on-screen instructions provided by the script, which include adding Homebrew to your PATH. * Install Allure: Once Homebrew is set up, install Allure:</p> <pre><code>brew install allure\n</code></pre>"},{"location":"getting-started/web-testing/playwright-linux/#step-2-getting-the-project-code","title":"Step 2: Getting the Project Code","text":"<ol> <li>Azure Authentication: Ensure you have set up authentication (HTTPS or SSH) to connect securely to Azure DevOps, as covered in the previous Git setup guide.</li> <li> <p>Clone the Repository: Open your terminal, navigate (<code>cd</code>) to where you want to store the project, and clone the specific Playwright repository used by the team (e.g., <code>PlaywrightV2</code>).</p> <p>```bash</p>"},{"location":"getting-started/web-testing/playwright-linux/#replace-with-the-actual-url-for-your-teams-playwright-repo","title":"Replace with the actual URL for your team's Playwright repo","text":"<p>git clone  cd  ```"},{"location":"getting-started/web-testing/playwright-linux/#step-3-setting-up-playwright-and-dependencies","title":"Step 3: Setting Up Playwright and Dependencies","text":"<p>Now, let's configure Playwright within the project folder.</p> <ol> <li> <p>Initialize Playwright: In the terminal, inside the cloned repository folder, run:</p> <p><code>bash npm init playwright@latest --yes -- --quiet --browser=chromium --browser=firefox --browser=webkit --gha</code></p> <ul> <li><code>npm init playwright@latest</code>: Initializes Playwright in the project using the latest version.</li> <li><code>--yes</code>: Accepts default prompts during initialization.</li> <li><code>--</code>: Separates <code>npm init</code> options from the Playwright script's options.</li> <li><code>--quiet</code>: Reduces the amount of output during installation.</li> <li><code>--browser=...</code>: Tells Playwright to download these specific browser binaries (Chromium, Firefox, WebKit).</li> <li><code>--gha</code>: Adds basic GitHub Actions workflow files for CI/CD (omit this if not needed).</li> </ul> </li> </ol>"},{"location":"getting-started/web-testing/playwright-linux/#step-4-configuring-vs-code","title":"Step 4: Configuring VS Code","text":"<p>For a better development experience in VS Code:</p> <ol> <li>Open the Project: Launch VS Code and open the cloned repository folder (<code>File</code> &gt; <code>Open Folder...</code>).</li> <li>Install Recommended Extensions:<ul> <li>Go to the Extensions view (click the icon on the left sidebar that looks like four squares, with one detached).</li> <li>Search for and install the following extensions:<ul> <li><code>C# Dev Kit</code>: Provides enhanced C# language support (intellisense, debugging).</li> <li><code>Playwright Test for VSCode</code>: Adds specific features for running and debugging Playwright tests directly within VS Code.</li> <li><code>Excel Viewer</code>: Useful if your project uses Excel files for test data or configuration.</li> </ul> </li> </ul> </li> </ol>"},{"location":"getting-started/web-testing/playwright-linux/#step-5-building-the-net-project","title":"Step 5: Building the .NET Project","text":"<p>Before running tests or project-specific scripts, compile the C# code.</p> <ol> <li> <p>Clean (Optional but Recommended): In the terminal (still inside the project folder), remove any old build artifacts:</p> <p><code>bash dotnet clean</code></p> </li> <li> <p>Build: Compile the project:</p> <p><code>bash dotnet build</code></p> </li> </ol>"},{"location":"getting-started/web-testing/playwright-linux/#step-6-installing-project-specific-dependencies","title":"Step 6: Installing Project-Specific Dependencies","text":"<p>This project includes PowerShell scripts to handle further dependency installations. These scripts install necessary system libraries for Playwright browsers and ensure browser binaries are correctly placed.</p> <ol> <li> <p>Install Linux Dependencies for Playwright: The path is specific to this project's structure after building:</p> <p>```bash</p> </li> <li> <p>Install Playwright Browsers (Project Script): This script handles browser installation within the project context:</p> <p>```bash</p> </li> </ol> <p>You should now have all the necessary components installed and configured to run Playwright tests from this project on your Ubuntu device.</p> <p>Happy testing!</p>"},{"location":"getting-started/web-testing/playwright-linux/#run-using-powershell-pwsh-command","title":"Run using PowerShell (pwsh command)","text":"<p>pwsh Test/KeywordDrivenTestFramework.Tests/bin/Debug/net6.0/playwright.ps1 install-deps ```</p>"},{"location":"getting-started/web-testing/playwright-linux/#run-using-powershell","title":"Run using PowerShell","text":"<p>pwsh Test/KeywordDrivenTestFramework.Tests/bin/Debug/net6.0/playwright.ps1 install ```</p>"},{"location":"getting-started/web-testing/playwright-windows/","title":"Getting Started with Playwright &amp; C# on Windows","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Welcome! This guide will help you set up your Windows machine to develop and run automated tests using Playwright with C#. We'll install the necessary tools like .NET, VS Code, Playwright itself, and some helpful utilities.</p>"},{"location":"getting-started/web-testing/playwright-windows/#prerequisites-setting-up-your-windows-environment","title":"Prerequisites: Setting Up Your Windows Environment","text":"<p>Let's get the essential software installed first.</p>"},{"location":"getting-started/web-testing/playwright-windows/#1-microsoft-net-runtime-sdk","title":"1. Microsoft .NET Runtime &amp; SDK","text":"<p>Playwright for C# runs on the .NET platform. This project requires .NET 9.0 (as of April 2025).</p> <ul> <li>Download .NET 9: Visit the official download page: .NET 9.0 Download</li> <li>Install Components: Download and install both of the following for x64 systems:</li> <li>.NET SDK (x64): The Software Development Kit is needed for building (compiling) the C# code.</li> <li>ASP.NET Core Runtime (x64): The runtime is needed to execute applications and test components.</li> <li>Run both installers, using the default settings.</li> </ul>"},{"location":"getting-started/web-testing/playwright-windows/#2-visual-studio-code-vs-code","title":"2. Visual Studio Code (VS Code)","text":"<p>A code editor or IDE is where you'll write your tests. VS Code is a recommended, free option.</p> <ul> <li>Option A: Download from Website: Get the installer from code.visualstudio.com/download and run it.</li> <li> <p>Option B: Install via <code>winget</code>: If you have Windows Package Manager (<code>winget</code>), you can open PowerShell or Command Prompt and run:</p> <p><code>bash winget install Microsoft.VisualStudioCode</code></p> </li> </ul>"},{"location":"getting-started/web-testing/playwright-windows/#3-nodejs-and-npm","title":"3. Node.js and npm","text":"<p>Playwright uses Node.js's package manager (npm) to install the Playwright library and manage the browser binaries it needs.</p> <ul> <li>Install Node.js: Download the LTS (Long Term Support) version installer from nodejs.org and run it with default settings (ensure \"Add to PATH\" is enabled).</li> <li> <p>Or Install via <code>winget</code>:</p> <p><code>bash winget install OpenJS.NodeJS.LTS</code></p> </li> <li> <p>Verify (Optional): Open a new PowerShell/Command Prompt and check versions using <code>node -v</code> and <code>npm -v</code>.</p> </li> </ul>"},{"location":"getting-started/web-testing/playwright-windows/#step-2-getting-the-project-code","title":"Step 2: Getting the Project Code","text":"<ol> <li>Azure Authentication: Make sure your machine is set up to securely connect to Azure DevOps using HTTPS or SSH. If you haven't done this, follow the steps outlined in the Git/Azure setup guide: Azure Authentication Setup (Ensure this link points to the correct local file or URL).</li> <li>Choose &amp; Clone Repository: The team uses several Playwright repositories:<ul> <li><code>PlaywrightRegression</code></li> <li><code>PlaywrightV2</code></li> <li><code>PlaywrightUnity</code> For getting started, clone <code>PlaywrightV2</code>.</li> </ul> </li> <li> <p>Clone: Open PowerShell/Command Prompt, navigate (<code>cd</code>) to where you want to store projects, and use <code>git clone</code> with the repository's URL from Azure DevOps:</p> <p>```powershell</p>"},{"location":"getting-started/web-testing/playwright-windows/#example-replace-with-the-actual-url-from-azure-devops-clone-button","title":"Example - Replace with the actual URL from Azure DevOps \"Clone\" button","text":"<p>git clone  cd PlaywrightV2 ```"},{"location":"getting-started/web-testing/playwright-windows/#step-3-setting-up-playwright-and-reporting-tools","title":"Step 3: Setting Up Playwright and Reporting Tools","text":"<p>Now, let's install Playwright into the project and set up the Allure reporting tool.</p>"},{"location":"getting-started/web-testing/playwright-windows/#1-installing-playwright","title":"1. Installing Playwright","text":"<ul> <li> <p>Initialize Playwright: In your terminal (inside the <code>PlaywrightV2</code> folder), run this command:</p> <p><code>bash npm init playwright@latest --yes -- --quiet --browser=chromium --browser=firefox --browser=webkit --gha</code></p> </li> <li> <p><code>npm init playwright@latest</code>: Starts the Playwright setup for the project.</p> </li> <li><code>--yes</code>: Accepts default prompts.</li> <li><code>--</code>: Separates npm options from Playwright's options.</li> <li><code>--quiet</code>: Less verbose output.</li> <li><code>--browser=...</code>: Downloads specified browser binaries needed for testing.</li> <li><code>--gha</code>: Optionally adds GitHub Actions workflow files (omit if not needed).</li> </ul>"},{"location":"getting-started/web-testing/playwright-windows/#2-installing-scoop-and-allure-for-reports","title":"2. Installing Scoop and Allure (for Reports)","text":"<p>Allure creates detailed, interactive test reports. We'll use Scoop, a command-line installer for Windows, to easily install Allure.</p> <ul> <li> <p>Allow Scoop Installation Scripts: First, ensure PowerShell can run the necessary scripts. Open PowerShell as Administrator and run:</p> <p><code>powershell Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force</code></p> <p>(You can close the Administrator PowerShell after this) * Install Scoop: Open a regular PowerShell window and run this command to download and install Scoop:</p> <p>```powershell Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression</p> </li> <li> <p>Install Allure using Scoop: Once Scoop is installed, run:</p> <p><code>powershell scoop install allure</code></p> </li> </ul>"},{"location":"getting-started/web-testing/playwright-windows/#shorthand-irm-getscoopsh-iex","title":"Shorthand: irm get.scoop.sh | iex","text":"<p>```</p>"},{"location":"getting-started/web-testing/playwright-windows/#step-4-configuring-vs-code","title":"Step 4: Configuring VS Code","text":"<p>Enhance your VS Code experience for C# and Playwright development.</p> <ol> <li>Open the Project: Launch VS Code, select <code>File</code> &gt; <code>Open Folder...</code>, and choose the <code>PlaywrightV2</code> folder you cloned.</li> <li>Install Recommended Extensions:<ul> <li>Click the Extensions icon (looks like square blocks) on the left sidebar.</li> <li>Search for and install these extensions:<ul> <li><code>C# Dev Kit</code>: Essential for C# development (code completion, debugging, etc.).</li> <li><code>Playwright Test for VSCode</code>: Adds features to run/debug Playwright tests directly from VS Code's interface.</li> <li><code>Excel Viewer</code>: Helpful if test data or configurations are stored in Excel files within the project.</li> </ul> </li> </ul> </li> </ol>"},{"location":"getting-started/web-testing/playwright-windows/#step-5-building-the-net-project","title":"Step 5: Building the .NET Project","text":"<p>Compile the C# code to make sure everything is ready.</p> <ol> <li> <p>Clean (Optional): Open a terminal (PowerShell or Command Prompt) inside the <code>PlaywrightV2</code> folder and run:</p> <p><code>bash dotnet clean</code></p> <p>(This removes old build files) 2. Build: Compile the project:</p> <p><code>bash dotnet build</code></p> </li> </ol>"},{"location":"getting-started/web-testing/playwright-windows/#step-6-running-tests","title":"Step 6: Running Tests","text":"<p>Now you should be ready to run tests.</p> <ol> <li>Navigate: Within the <code>PlaywrightV2</code> folder structure, find the test files (e.g., inside a path like <code>Unit Tests\\Individual Tests</code>).</li> <li>Find a Test: Open a C# file (<code>.cs</code>) in this directory. Look for methods (functions) marked with attributes like <code>[TestMethod]</code>, <code>[Fact]</code>, or <code>[Test]</code>. These are the actual test cases.</li> <li> <p>Run from VS Code: Use the features provided by the VS Code extensions:</p> <ul> <li>Gutter Icons: Look for small \"Run Test\" or \"Debug Test\" icons directly next to the test method definition in the editor gutter. Click these to run or debug that specific test.</li> <li>Test Explorer: Look for a \"Testing\" icon (often looks like a beaker or flask) in the VS Code activity bar on the left. This panel discovers and lists your tests, allowing you to run them individually or in groups.</li> </ul> </li> <li> <p>Note: If you encounter issues running tests via the VS Code UI, you can typically also run them from the command line using <code>dotnet test</code> within the project directory. Consult the Playwright Test extension documentation for troubleshooting if needed.</p> </li> </ol> <p>You're now set up to work with Playwright tests on Windows!</p> <p>Happy testing!</p>"},{"location":"getting-started/web-testing/selenium/","title":"Getting Started with Selenium WebDriver in Java","text":"<p>Welcome! This guide will walk you through setting up your Windows environment to run automated web tests using Selenium WebDriver with Java and the NetBeans IDE. We'll install the necessary tools step by step.</p>"},{"location":"getting-started/web-testing/selenium/#1-install-java-development-kit-jdk-and-netbeans-ide","title":"1. Install Java Development Kit (JDK) and NetBeans IDE","text":"<p>First, you need the Java environment and a place to write your code.</p>"},{"location":"getting-started/web-testing/selenium/#openjdk-8","title":"OpenJDK 8","text":"<p>The Selenium test projects in this setup require Java 8 (OpenJDK 8) to run correctly due to specific dependencies and compatibility.</p> <ul> <li>Download: Get OpenJDK 8 (select Java 8, your OS, architecture, and JDK package) from a reliable provider like OpenLogic:</li> <li>\ud83d\udce5 Download OpenJDK 8</li> <li>Install: Extract the downloaded archive to a location like <code>C:\\Program Files\\Java\\</code> or <code>D:\\jdks\\</code>. Remember the full path to the installation directory (e.g., <code>C:\\Program Files\\Java\\jdk-8.0.422.05-hotspot</code>).</li> </ul>"},{"location":"getting-started/web-testing/selenium/#netbeans-ide","title":"NetBeans IDE","text":"<p>An Integrated Development Environment (IDE) helps you write, run, and debug code. For compatibility with Java 8, use NetBeans version 18 or older. This guide uses NetBeans 17.</p> <ul> <li>Download: Get the installer for NetBeans 17 from the Apache archive:</li> <li>Download NetBeans 17</li> <li>Install: Run the installer using the default settings.</li> </ul>"},{"location":"getting-started/web-testing/selenium/#2-install-chrome-browser-chromedriver-and-nodejs","title":"2. Install Chrome Browser, ChromeDriver, and Node.js","text":"<p>Selenium controls web browsers using special programs called WebDriver executables. For testing with Google Chrome, you need Chrome itself and the corresponding ChromeDriver. We'll use Node.js and its package manager (npm) along with a helper tool (<code>@puppeteer/browsers</code>) to easily download and manage compatible versions.</p>"},{"location":"getting-started/web-testing/selenium/#nodejs-and-npm","title":"Node.js (and npm)","text":"<ul> <li>Download &amp; Install Node.js: Get the LTS (Long Term Support) version from the official site:</li> <li>Download Node.js     Run the installer with default settings (ensure \"Add to PATH\" is checked).</li> <li> <p>Verify Installation: After installation, open PowerShell or Command Prompt and check the versions:</p> <p><code>bash node --version npm --version</code></p> <p>If you see version numbers, Node.js and npm are ready. If not, check your system's PATH environment variable (see next section).</p> </li> </ul>"},{"location":"getting-started/web-testing/selenium/#install-chrome-and-chromedriver-via-npm","title":"Install Chrome and ChromeDriver via npm","text":"<p>Now, use npm/npx (npx runs packages without needing global install) in your terminal to install the <code>@puppeteer/browsers</code> tool and use it to download stable versions of Chrome and ChromeDriver:</p> <pre><code># Install the browser management tool globally (optional, but can be convenient)\nnpm install -g @puppeteer/browsers\n\n# Use the tool (via npx) to install the correct stable ChromeDriver\nnpx @puppeteer/browsers install chromedriver@stable\n\n# Use the tool (via npx) to install the stable version of Chrome\nnpx @puppeteer/browsers install chrome@stable\n</code></pre> <p>This ensures you get versions of Chrome and ChromeDriver that are known to work well together. Note the download location reported by the tool (you'll need it for the PATH setup).</p>"},{"location":"getting-started/web-testing/selenium/#3-setting-up-environment-variables","title":"3. Setting Up Environment Variables","text":"<p>Your operating system needs to know where to find the Java JDK and the browser drivers you installed. We configure this using Environment Variables.</p>"},{"location":"getting-started/web-testing/selenium/#steps-to-edit-environment-variables-on-windows","title":"Steps to Edit Environment Variables on Windows","text":"<ol> <li>In the Windows search bar, type <code>environment</code> and select \"Edit system environment variables\".</li> <li>In the System Properties window that opens, click the \"Environment Variables...\" button near the bottom.</li> </ol>"},{"location":"getting-started/web-testing/selenium/#add-java_home-system-variable","title":"Add <code>JAVA_HOME</code> (System Variable)","text":"<p>This variable tells Java-based applications where to find the JDK.</p> <ol> <li>Under the \"System Variables\" section (bottom half), click \"New...\".</li> <li>For Variable name, enter <code>JAVA_HOME</code>.</li> <li> <p>For Variable value, enter the full path to your OpenJDK 8 installation directory (the one you remembered from Step 1), for example:</p> <p><code>text C:\\Program Files\\OpenLogic\\jdk-8.0.422.05-hotspot\\</code></p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"getting-started/web-testing/selenium/#add-chrome-and-chromedriver-to-path-user-variable","title":"Add Chrome and ChromeDriver to <code>Path</code> (User Variable)","text":"<p>Adding directories to the <code>Path</code> variable allows the system to find executable files (like <code>chromedriver.exe</code>) from any terminal location. It's often convenient to keep these on a <code>D:\\</code> drive if you have one, but place them in a stable location.</p> <ul> <li>Recommended Locations (Examples):</li> <li>Chrome: <code>D:\\Chrome\\chrome-win64</code> (or the path reported by <code>@puppeteer/browsers install</code>)</li> <li> <p>ChromeDriver: <code>D:\\chromedriver\\chromedriver-win64</code> (or the path reported by <code>@puppeteer/browsers install</code>)</p> </li> <li> <p>Steps to Add to Path:</p> <ol> <li>In the Environment Variables window, under the \"User variables for [YourUsername]\" section (top half), find and double-click the <code>Path</code> variable.</li> <li>Click \"New\".</li> <li>Paste the full path to the directory containing <code>chrome.exe</code> (e.g., <code>D:\\Chrome\\chrome-win64</code>).</li> <li>Click \"New\" again.</li> <li>Paste the full path to the directory containing <code>chromedriver.exe</code> (e.g., <code>D:\\chromedriver\\chromedriver-win64</code>).</li> <li>Click OK on all open Environment Variables / System Properties windows.</li> </ol> </li> <li> <p>Restart Required: You must restart your computer for these environment variable changes to take full effect system-wide.</p> </li> </ul>"},{"location":"getting-started/web-testing/selenium/#4-running-your-first-selenium-test","title":"4. Running Your First Selenium Test","text":"<p>Before starting, ensure you are familiar with basic Git operations for cloning repositories. Refer to our Git basics guide if needed.</p>"},{"location":"getting-started/web-testing/selenium/#steps","title":"Steps","text":"<ol> <li>Clone the Repository: Use Git to clone the <code>AutomatedTests</code> repository from Azure DevOps onto your machine.</li> <li>Open Project in NetBeans: Launch NetBeans IDE. Go to File &gt; Open Project... and navigate to and select the cloned <code>AutomatedTests</code> folder.</li> <li> <p>Locate Test Suites: The project structure should appear in the Projects tab (usually on the left sidebar). Navigate through the project tree to:</p> <p>DynaMiXShakedownAutomatedTests &gt; Test Packages &gt; TestSuites</p> <p> (Shows the project structure in NetBeans)</p> </li> <li> <p>Open a Test File: Double-click any <code>.java</code> file within the <code>TestSuites</code> folder to open it in the editor.</p> </li> <li> <p>Find a Test Method: Scroll through the code to find a method annotated with <code>@Test</code>. These methods typically have names indicating what they test, like:</p> <p><code>java @Test public void RunSomeNameSmokeTestTestPackChrome() {     // Test code inside... }</code></p> <ul> <li>The <code>@Test</code> annotation marks this Java method as an executable test case for the testing framework (likely TestNG or JUnit).</li> </ul> </li> <li> <p>Run the Test: Right-click directly on the method name (e.g., <code>RunSomeNameSmokeTestTestPackChrome</code>) in the editor.</p> </li> <li>Select \"Run Focused Test Method\" from the context menu.</li> </ol> <p>If everything is set up correctly, a new Chrome browser window should open, and Selenium will start interacting with web pages automatically according to the test script. Congratulations \u2013 you've successfully run your first Selenium test! If errors occur, carefully review the setup steps and any error messages in the NetBeans output window.</p>"},{"location":"misc/azure/","title":"Getting Started with Azure DevOps Repositories","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Welcome! Azure DevOps is the central place where our team stores and manages the code for all our automated tests. Think of it as our shared library for test automation projects. As you work here, you'll frequently interact with these codebases, known as repositories (or \"repos\"). You can access our Azure DevOps organization here: MiX Telematics Automated Tests.</p>"},{"location":"misc/azure/#navigating-to-the-repositories","title":"Navigating to the Repositories","text":"<p> (The main Azure DevOps dashboard)</p> <p>When you first land on the Azure DevOps site, you'll see a summary page. To find the code:</p> <ol> <li>Look for the navigation menu on the left side.</li> <li>Click on the \"Repos\" link (it usually has an icon like branching code). This section contains all the different code repositories.</li> </ol> <p>Alternatively, this link takes you directly to a specific repository to start: Example Repo Link</p> <p>Once you're in the \"Repos\" section, you'll see the files for one specific repository. To switch between different repositories:</p> <ol> <li>Look near the top of the page, usually just below the main header. You'll see the current repository's name (like a breadcrumb trail).</li> <li>Click on the repository name itself. A dropdown list will appear, showing all the repositories you have access to.</li> <li>For Trainees: Find and click on <code>Training_AutomatedTests</code> in the list. This will open your dedicated training repository where you can practice.</li> </ol>"},{"location":"misc/azure/#getting-the-code-cloning-a-repository","title":"Getting the Code: Cloning a Repository","text":"<p>Before you can work with the code, you need to copy it from Azure DevOps onto your computer. This process is called \"cloning\". However, before you can clone, Azure DevOps needs to know who you are to grant you access securely.</p>"},{"location":"misc/azure/#authentication-connecting-securely","title":"Authentication: Connecting Securely","text":"<p>You need to set up either HTTPS or SSH authentication between your machine and Azure DevOps. This tells Azure DevOps that your computer is authorized to access the code.</p> <ul> <li>This is a one-time setup per machine.</li> <li>Setting this up involves generating credentials (like a Personal Access Token for HTTPS or an SSH key pair) and configuring Git to use them.</li> <li>The detailed instructions are provided by Microsoft and are essential reading before proceeding: Azure DevOps Git Authentication Overview. Please follow that guide carefully to get your authentication configured.</li> </ul>"},{"location":"misc/azure/#cloning-steps-after-authentication-is-set-up","title":"Cloning Steps (After Authentication is Set Up)","text":"<ol> <li>Navigate to the Repository: In Azure DevOps online, make sure you have the correct repository open (e.g., <code>Training_AutomatedTests</code>).</li> <li>Find the Clone Button: Look for a button labeled \"Clone\" (usually near the top right).</li> <li>Copy the URL: Clicking \"Clone\" will reveal options for HTTPS or SSH. Click the copy icon next to the URL type you configured during authentication (HTTPS is often simpler to start with). This copies the repository's unique address to your clipboard.</li> <li>Open Your Terminal: Launch PowerShell (or Git Bash, or another command-line terminal).</li> <li>Navigate to Your Workspace: Use the <code>cd</code> command to move into the directory where you want to store your project code (e.g., <code>cd D:\\Source\\Repos</code>).</li> <li> <p>Run <code>git clone</code>: Type <code>git clone</code> followed by a space, and then paste the URL you copied from Azure DevOps. Press Enter.</p> <ul> <li> <p>HTTPS Example:</p> <p><code>powershell git clone https://MiXTelematics@dev.azure.com/MiXTelematics/AutomatedTests/_git/Training_AutomatedTests</code></p> </li> <li> <p>SSH Example:</p> <p><code>powershell git clone git@ssh.dev.azure.com:v3/MiXTelematics/AutomatedTests/Training_AutomatedTests</code></p> </li> </ul> </li> </ol> <p>Git will now download a complete copy of the repository's code and history into a new folder (named <code>Training_AutomatedTests</code> in this example) inside your current directory.</p>"},{"location":"misc/azure/#quick-guide-to-important-repositories","title":"Quick Guide to Important Repositories","text":"<p>Here's a brief overview of some key test automation repositories you might encounter:</p> <ul> <li>Java:</li> <li><code>AutomatedTests</code>: Contains core Java \"shakedown\" tests (quick checks to ensure basic functionality is working, often run after a deployment).</li> <li><code>DynaMiXRegression</code>: Holds Java \"regression\" tests (more extensive tests designed to catch previously fixed bugs and ensure features still work).</li> <li><code>MobileRegression</code>: The older repository for mobile testing (likely being phased out).</li> <li><code>MobileTests</code>: The current/upcoming repository for mobile testing using newer frameworks/approaches.</li> <li>C#:</li> <li><code>PlaywrightRegression</code>: The C# regression test suite using the Playwright framework.</li> <li><code>PlaywrightShakedown</code>: The main C# shakedown test suite using Playwright (also referred to as <code>PlaywrightV2</code> in some contexts).</li> <li><code>PlaywrightUnityShakedown</code>: C# Playwright shakedown tests specifically targeting the Unity platform.</li> <li><code>Microsmoketests</code>: Contains very small, fast C# \"smoke tests\" (checking the absolute critical paths are working).</li> <li><code>PlaywrightWatchdogs</code>: Holds C# \"watchdog\" tests (likely tests that monitor system health or availability).</li> </ul> <p>This should help you get started with finding and accessing the code you need from Azure DevOps!</p>"},{"location":"misc/environments/","title":"Understanding Our Application Environments","text":"<p>Welcome! At Powerfleet (formerly MiX Telematics), our fleet management platform isn't just one single website. We operate several different versions, called environments, to serve various regions and purposes like development, testing, and production. Knowing which environment you're testing against is essential for running the right tests and interpreting results correctly.</p>"},{"location":"misc/environments/#list-of-key-environments","title":"List of Key Environments","text":"<p>Here are the main environments you'll likely interact with, along with their abbreviations and URLs:</p> <ul> <li>ALG (Algeria): <code>alg.mixtelematics.com</code></li> <li>Serves the Algeria region.</li> <li>AU (Australia): <code>au.mixtelematics.com</code></li> <li>Serves the Australia region.</li> <li>CPT (South Africa / Cape Town): <code>za.mixtelematics.com</code></li> <li>Serves the South Africa region.</li> <li>ENT (Enterprise): <code>ent.mixtelematics.com</code></li> <li>A specific environment often used for large enterprise clients.</li> <li>INT (Integration): <code>int.mixtelematics.com</code></li> <li>This is our main development and integration testing environment. It typically has the very latest code changes and newest features, making it \"cutting-edge\" but potentially less stable than others. Most new feature testing happens here first.</li> <li>OMN (Oman): <code>om.mixtelematics.com</code></li> <li>Serves the Oman region.</li> <li>UAE (United Arab Emirates): <code>uae.mixtelematics.com</code></li> <li>Serves the UAE region.</li> <li>UAT (User Acceptance Testing): <code>uat.mixtelematics.com</code></li> <li>This is a pre-production environment. It's used for final testing and validation by internal teams or sometimes clients before features are released to the live production environments. It should be much more stable than INT.</li> <li>UK (United Kingdom): <code>uk.mixtelematics.com</code></li> <li>Serves the UK region.</li> <li>US (United States): <code>us.mixtelematics.com</code></li> <li>Serves the US region.</li> </ul>"},{"location":"misc/environments/#accessing-environments-in-test-code","title":"Accessing Environments in Test Code","text":"<p>When writing or running automated tests, you won't usually type these URLs directly. Instead, these environment identifiers (like <code>INT</code>, <code>UAT</code>, <code>US</code>, etc.) are typically defined as constants within the test automation code, often found within an <code>Enums</code> package or similar configuration area in each web testing module. This allows tests to easily switch target environments.</p>"},{"location":"misc/git/","title":"Getting Started with Git for Version Control","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Welcome! To work effectively with the code repositories stored in Azure DevOps, you'll need a tool called Git. Git is a Version Control System (VCS). Think of it as a powerful \"undo\" button and collaboration tool for code. It tracks changes made to files over time, allows multiple people to work on the same project without overwriting each other's work, and lets you synchronize your local code with the central repository in Azure DevOps.</p> <p>This guide covers installing Git and understanding a basic workflow.</p>"},{"location":"misc/git/#installing-git","title":"Installing Git","text":"<p>First things first, let's get Git installed on your computer.</p> <ol> <li>Download Git: Go to the official Git website and download the installer for your operating system (Windows link provided below):<ul> <li>Download Git for Windows</li> </ul> </li> <li>Run the Installer: Open the downloaded file and proceed through the installation steps.</li> <li>Use Default Settings: The default settings selected during installation are suitable for most users. You can generally click \"Next\" through all the options.</li> <li> <p>Verify Installation: Once installed, open your terminal (PowerShell, Git Bash, Command Prompt) and type the following command, then press Enter:</p> <p><code>bash git --version</code></p> <p>If Git is installed correctly, you'll see the installed version number printed (e.g., <code>git version 2.40.0.windows.1</code>).</p> </li> </ol>"},{"location":"misc/git/#understanding-a-basic-git-workflow","title":"Understanding a Basic Git Workflow","text":"<p>Git can seem a bit complex at first, but you'll primarily use a few core commands for daily work. If you're completely new to Git, searching online for \"beginner git tutorial\" will yield many great resources (like those on the official Git site, GitHub Docs, Atlassian, or freeCodeCamp).</p> <p>Here\u2019s a very common, simplified workflow you'll often follow when working with a repository you've already cloned (copied) to your machine:</p> <ol> <li> <p><code>git pull</code>: Get Latest Changes.</p> <ul> <li>What it does: Before you start making your own changes, get the latest updates that others might have pushed to the central repository in Azure DevOps. <code>git pull</code> fetches these changes and merges them into your local copy.</li> <li> <p>When to use it: Run this when you start working on the project for the day, or before starting a new task, to ensure you're working with the most up-to-date code.</p> <p>```bash</p> </li> </ul> </li> <li> <p>Make Your Code Changes:</p> <ul> <li>Edit files, add new files, or delete files using your code editor (like VS Code, NetBeans, IntelliJ).</li> </ul> </li> <li> <p><code>git status</code>: Check Your Changes.</p> <ul> <li>What it does: Shows you which files you've modified, added, or deleted since your last save (commit).</li> <li> <p>When to use it: Frequently, to see the state of your working directory.</p> <p><code>bash git status</code></p> </li> </ul> </li> <li> <p><code>git add &lt;file&gt;</code> or <code>git add .</code>: Stage Your Changes.</p> <ul> <li>What it does: Selects (\"stages\") the specific changes you want to include in your next save point (commit). You can stage individual files or use <code>.</code> to stage all modified/new files in the current directory and subdirectories.</li> <li> <p>When to use it: After making changes and before committing, to prepare the changes for the commit.</p> <p>```bash</p> </li> </ul> </li> <li> <p><code>git commit -m \"Your descriptive message\"</code>: Save Your Changes Locally.</p> <ul> <li>What it does: Creates a snapshot (a \"commit\") of your staged changes in Git's history on your local machine. The <code>-m</code> flag lets you provide a brief message describing what you changed (e.g., \"Fix login test for new button ID\", \"Add validation for user input\"). Good commit messages are important!</li> <li> <p>When to use it: After staging changes, to permanently record them in your local Git history.</p> <p><code>bash git commit -m \"Update Customers test with correct XPath\"</code></p> </li> </ul> </li> <li> <p><code>git push</code>: Share Your Changes.</p> <ul> <li>What it does: Uploads your locally committed changes to the central repository on Azure DevOps, making them available to the rest of the team.</li> <li> <p>When to use it: After committing your changes locally, when you're ready to share them.</p> <p><code>bash git push</code></p> </li> </ul> </li> </ol> <p>This <code>pull -&gt; change -&gt; add -&gt; commit -&gt; push</code> cycle is fundamental. There's much more to Git (like branching, merging, handling conflicts), but mastering this basic workflow is the essential first step!</p>"},{"location":"misc/git/#make-sure-you-are-inside-your-projects-directory-first","title":"Make sure you are inside your project's directory first!","text":"<p>cd path\\to\\your\\MiXIntegrate # Or other repo folder git pull ```</p>"},{"location":"misc/git/#stage-a-specific-file","title":"Stage a specific file","text":"<p>git add src/test/my_new_test.java</p>"},{"location":"misc/git/#or-stage-all-changes-in-the-current-directory-and-below","title":"Or stage all changes in the current directory and below","text":"<p>git add . ```</p>"},{"location":"node-setup/linux-x64/","title":"Setting up an Ubuntu (x64) Environment for Remote Access (XRDP)","text":"<p>Welcome! This guide explains how to set up an Ubuntu Linux machine (x64) so you can connect to its graphical desktop remotely from another computer (like Windows) using XRDP (Remote Desktop Protocol). This is particularly useful for accessing testing environments or development nodes.</p>"},{"location":"node-setup/linux-x64/#1-setting-up-xrdp-remote-desktop-server","title":"1. Setting up XRDP (Remote Desktop Server)","text":"<p>XRDP allows you to use tools like Windows Remote Desktop Connection to see and interact with the Ubuntu desktop.</p>"},{"location":"node-setup/linux-x64/#installation","title":"Installation","text":"<ul> <li> <p>First, install the XRDP package. Open a terminal on the Ubuntu machine and run:</p> <p><code>bash sudo apt update &amp;&amp; sudo apt install xrdp -y</code></p> <p>(This updates your package list and installs <code>xrdp</code>)</p> </li> </ul>"},{"location":"node-setup/linux-x64/#environment-configuration-for-gnome-desktop","title":"Environment Configuration (for GNOME Desktop)","text":"<ul> <li>If your Ubuntu uses the standard GNOME desktop environment, XRDP needs specific settings to display it correctly. You need to edit a startup configuration file. Editing <code>/etc/xrdp/startwm.sh</code> is recommended.</li> <li> <p>Open the file with root privileges using a terminal editor like <code>nano</code>:</p> <p><code>bash sudo nano /etc/xrdp/startwm.sh</code></p> </li> <li> <p>Add the following lines at the very beginning of the file, before any existing commands:</p> <p><code>bash export GNOME_SHELL_SESSION_MODE=ubuntu export XDG_CURRENT_DESKTOP=ubuntu:GNOME export XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg</code></p> <p>(These ensure XRDP starts the correct GNOME session) * Save the file (in <code>nano</code>: Ctrl+O, Enter) and exit (Ctrl+X). * Reboot the Ubuntu machine for these changes to take effect:</p> <p><code>bash sudo reboot</code></p> </li> </ul>"},{"location":"node-setup/linux-x64/#permissions-fix-preventing-blank-screen","title":"Permissions Fix (Preventing Blank Screen)","text":"<ul> <li>Sometimes, after connecting via XRDP, you might see only a blank screen. This is often due to permission issues related to SSL certificates used by XRDP.</li> <li> <p>To fix this, add the <code>xrdp</code> user (which runs the XRDP service) to the <code>ssl-cert</code> group. In the terminal, run:</p> <p><code>bash sudo adduser xrdp ssl-cert</code></p> </li> <li> <p>Reboot the Ubuntu machine again to apply the group membership change.</p> <p><code>bash sudo reboot</code></p> </li> </ul>"},{"location":"node-setup/linux-x64/#enable-d-bus-communication","title":"Enable D-Bus Communication","text":"<ul> <li>D-Bus is a system message bus that allows applications to communicate with each other. XRDP relies on it. Ensure the necessary D-Bus components are running.</li> <li> <p>Install the D-Bus X11 package:</p> <p><code>bash sudo apt install dbus-x11 -y</code></p> </li> <li> <p>Ensure the D-Bus session is launched (this often happens automatically on login, but running <code>dbus-launch</code> manually in a terminal session doesn't hurt if troubleshooting):</p> <p><code>bash dbus-launch</code></p> </li> </ul>"},{"location":"node-setup/linux-x64/#2-connecting-to-the-ubuntu-machine-via-xrdp","title":"2. Connecting to the Ubuntu Machine via XRDP","text":"<p>Now that XRDP is configured on the Ubuntu machine, you can connect from another computer.</p>"},{"location":"node-setup/linux-x64/#from-windows","title":"From Windows","text":"<ol> <li>Open the Remote Desktop Connection application (search for <code>mstsc.exe</code>).</li> <li>Click \"Show Options\".</li> <li>In the \"Computer\" field, enter the IP address of the Ubuntu machine.</li> <li>In the \"User name\" field, enter your Ubuntu username.</li> <li>Click \"Connect\".</li> <li>You'll likely see the XRDP login screen. Ensure the \"Session\" field is set to <code>Xorg</code> or <code>X11rdp</code>.</li> <li>Enter your Ubuntu user's password.</li> <li>Click \"OK\" to connect to the graphical desktop.</li> </ol> <p>If you encounter connection problems or a blank screen, carefully review the XRDP setup steps (Installation, Environment, Permissions, D-Bus) and ensure all reboots were completed.</p>"},{"location":"node-setup/linux-x64/#3-installing-playwright","title":"3. Installing Playwright","text":"<p>While you can use the graphical desktop via XRDP, it's generally better and more reliable to perform command-line installations like Playwright using SSH (Secure Shell).</p> <ol> <li> <p>Connect via SSH: Open a terminal or PowerShell on your local machine and connect using:</p> <p><code>bash ssh your_ubuntu_username@&lt;IP-address_of_Ubuntu_machine&gt;</code></p> <p>(Replace placeholders with your actual username and the Ubuntu machine's IP address). 2. Follow Playwright Linux Setup: Once connected via SSH, follow the standard instructions for installing Playwright and its dependencies for Linux/Ubuntu, which can be found here: * Getting Started with Playwright on Linux (Ubuntu) (Ensure this link points to the correct guide).</p> </li> </ol>"},{"location":"node-setup/linux-x64/#4-jenkins-agent-setup-partial-info","title":"4. Jenkins Agent Setup (Partial Info)","text":"<p>This section relates to configuring the Ubuntu machine as a Jenkins agent node.</p>"},{"location":"node-setup/linux-x64/#create-new-node-in-jenkins","title":"Create New Node in Jenkins","text":"<ul> <li>You will need to configure this Ubuntu machine as a new agent node within your Jenkins interface.</li> </ul>"},{"location":"node-setup/linux-x64/#hostname-resolution-etchosts","title":"Hostname Resolution (<code>/etc/hosts</code>)","text":"<ul> <li>For the Jenkins agent script or connection process to work correctly, the Ubuntu machine needs to be able to find the Jenkins master using its hostname (e.g., <code>dsstbautomate</code>). Add an entry to the Ubuntu machine's hosts file.</li> <li> <p>Open the hosts file for editing:</p> <p><code>bash sudo nano /etc/hosts</code></p> </li> <li> <p>Add a line mapping the Jenkins master's IP address to its hostname:</p> <p><code>text 10.34.16.11    dsstbautomate</code></p> <p>(Replace the IP address and hostname with the correct values for your Jenkins setup) * Save the file (Ctrl+O, Enter) and exit (Ctrl+X).</p> </li> </ul>"},{"location":"node-setup/linux-x64/#references","title":"References","text":"<ul> <li>Troubleshooting XRDP Blank Screens: DeviceTests.com Fix</li> </ul>"},{"location":"tutorials/web-testing/tutorial-1/","title":"Test Case: Tutorial 1 - Navigate to Assets using xPaths","text":""},{"location":"tutorials/web-testing/tutorial-1/#objective","title":"Objective","text":"<p>The objective of this test is to navigate to the Assets section using xPaths.</p>"},{"location":"tutorials/web-testing/tutorial-1/#steps","title":"Steps","text":"<ol> <li>Login to uat.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code> </p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Assets: </p> </li> <li>Click on the Monitor tab  </li> <li>Click on the Assets link  </li> </ol>"},{"location":"tutorials/web-testing/tutorial-1/#notes","title":"Notes","text":"<ul> <li>Ensure correct xPaths are used for navigation.  </li> <li>Verify that the Assets page loads successfully.  </li> </ul>"},{"location":"tutorials/web-testing/tutorial-10/","title":"Test Case: Tutorial 10 - Extract Data into a Parameter for Jenkins","text":""},{"location":"tutorials/web-testing/tutorial-10/#objective","title":"Objective","text":"<p>The objective of this test is to learn how to extract the Asset ID and use it as a parameter for Jenkins reports.  </p>"},{"location":"tutorials/web-testing/tutorial-10/#steps","title":"Steps","text":"<ol> <li>Login to uat.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code></p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Assets: </p> </li> <li>Click on the Monitor tab  </li> <li> <p>Click on Assets </p> </li> <li> <p>Validate Asset ID: </p> </li> <li> <p>Locate and validate that the Asset ID is <code>\"888\"</code> </p> </li> <li> <p>Extract Asset ID as a Parameter for Jenkins: </p> </li> <li>Write logic to extract the Asset ID and pass it as a parameter for Jenkins.  </li> <li>Ensure that the extracted Asset ID appears in the Jenkins report as a parameter.  </li> </ol>"},{"location":"tutorials/web-testing/tutorial-10/#notes","title":"Notes","text":"<ul> <li>Ensure the Asset ID is correctly identified and extracted from the page.  </li> <li>Verify that the extracted Asset ID appears in Jenkins when the test report is generated.  </li> </ul>"},{"location":"tutorials/web-testing/tutorial-2/","title":"Test Case: Tutorial 2 - Filter for MiX Automation Live Unit","text":""},{"location":"tutorials/web-testing/tutorial-2/#objective","title":"Objective","text":"<p>The objective of this test is to filter for the MiX Automation Live Unit.  </p>"},{"location":"tutorials/web-testing/tutorial-2/#steps","title":"Steps","text":"<ol> <li>Login to uat.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code> </p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Live Tracking: </p> </li> <li>Click on the Monitor tab  </li> <li> <p>Click on Live Tracking </p> </li> <li> <p>Apply Filter: </p> </li> <li>On the left, click the filter box </li> <li>Enter <code>\"MiX Automation Live Unit\"</code> in the filter field  </li> </ol>"},{"location":"tutorials/web-testing/tutorial-2/#notes","title":"Notes","text":"<ul> <li>Ensure the correct unit is displayed after applying the filter.  </li> <li>Verify that filtering functions correctly and returns the expected results.  </li> </ul>"},{"location":"tutorials/web-testing/tutorial-3/","title":"Test Case: Tutorial 3 - Add a New Driver","text":""},{"location":"tutorials/web-testing/tutorial-3/#objective","title":"Objective","text":"<p>The objective of this test is to add a New Driver to the system.  </p>"},{"location":"tutorials/web-testing/tutorial-3/#steps","title":"Steps","text":"<ol> <li>Login to integration.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code> </p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Drivers: </p> </li> <li>Click on the Monitor tab  </li> <li> <p>Click on Drivers </p> </li> <li> <p>Add a New Driver: </p> </li> <li>Click the Green + sign (Add Driver)  </li> <li>Under Name, enter: <code>\"Test New MiX Driver\"</code> </li> <li>Under Site, select: <code>\"Default site\"</code> </li> <li>Click Save </li> </ol>"},{"location":"tutorials/web-testing/tutorial-3/#notes","title":"Notes","text":"<ul> <li>Ensure the new driver appears in the Drivers list after saving.  </li> <li>Verify that all details are correctly entered and saved successfully.  </li> </ul>"},{"location":"tutorials/web-testing/tutorial-4/","title":"Test Case: Tutorial 4 - Remove a Driver using Robot","text":""},{"location":"tutorials/web-testing/tutorial-4/#objective","title":"Objective","text":"<p>The objective of this test is to remove a driver using Robot.  </p>"},{"location":"tutorials/web-testing/tutorial-4/#steps","title":"Steps","text":"<ol> <li>Login to integration.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code> </p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Drivers: </p> </li> <li>Click on the Monitor tab  </li> <li> <p>Click on Drivers </p> </li> <li> <p>Remove the Driver: </p> </li> <li>Filter for \"Test New MiX Driver\" (created in Training3)  </li> <li>Click on the dropdown next to the driver  </li> <li>Select Remove Driver </li> <li>Confirm the removal  </li> </ol>"},{"location":"tutorials/web-testing/tutorial-4/#notes","title":"Notes","text":"<ul> <li>Ensure the driver is no longer listed after removal.  </li> <li>Verify that the removal process completes without errors.  </li> </ul>"},{"location":"tutorials/web-testing/tutorial-5/","title":"Test Case: Tutorial 5 - Write Using Robot","text":""},{"location":"tutorials/web-testing/tutorial-5/#objective","title":"Objective","text":"<p>The objective of this test is to add an asset and write the Registration Number using Robot.  </p>"},{"location":"tutorials/web-testing/tutorial-5/#steps","title":"Steps","text":"<ol> <li>Login to uat.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code></p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Assets: </p> </li> <li>Click on the Monitor tab  </li> <li> <p>Click on Assets </p> </li> <li> <p>Add a New Asset: </p> </li> <li>Click the Green + sign (Add Asset)  </li> <li>Enter Asset Description: <code>\"Test New MiX Asset\"</code> </li> <li>Select Asset Type: <code>\"Light Vehicle\"</code> </li> <li>Enter Registration Number using Robot: <code>\"9876543210\"</code> </li> <li>Select Site: <code>\"Default Site\"</code> </li> <li>Click Save </li> <li> <p>Click Close </p> </li> <li> <p>Remove the Asset: </p> </li> <li>Filter for the newly created asset  </li> <li>Remove the asset  </li> <li>Confirm removal  </li> </ol>"},{"location":"tutorials/web-testing/tutorial-5/#notes","title":"Notes","text":"<ul> <li>Ensure that the Registration Number is entered correctly using Robot.  </li> <li>Verify that the asset appears in the list before removal.  </li> <li>Confirm that the asset is successfully removed.  </li> <li>When testing, you may need to check timing to ensure smooth execution.  </li> </ul>"},{"location":"tutorials/web-testing/tutorial-6/","title":"Test Case: Tutorial 6 - Validate a Field","text":""},{"location":"tutorials/web-testing/tutorial-6/#objective","title":"Objective","text":"<p>The objective of this test is to validate the Passenger ID field.  </p>"},{"location":"tutorials/web-testing/tutorial-6/#steps","title":"Steps","text":"<ol> <li>Login to uat.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code> </p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Passengers: </p> </li> <li>Click on the Monitor tab  </li> <li> <p>Click on Passengers </p> </li> <li> <p>Validate Field: </p> </li> <li>Filter Passengers by entering <code>\"MiX Passenger\"</code> </li> <li> <p>Verify that the Passenger ID field is \"2\" </p> </li> <li> <p>Clear the Filter: </p> </li> <li>Remove the filter from the filter bar  </li> </ol>"},{"location":"tutorials/web-testing/tutorial-6/#notes","title":"Notes","text":"<ul> <li>Ensure the Passenger ID field is displayed correctly.  </li> <li>Verify that the filter works as expected.  </li> <li>Confirm that clearing the filter restores the full passenger list.  </li> </ul>"},{"location":"tutorials/web-testing/tutorial-7/","title":"Test Case: Tutorial 7 - Delete Multiple Created Assets","text":""},{"location":"tutorials/web-testing/tutorial-7/#objective","title":"Objective","text":"<p>The objective of this test is to delete multiple Test MiX New Assets from the system.  </p>"},{"location":"tutorials/web-testing/tutorial-7/#steps","title":"Steps","text":"<ol> <li>Login to UAT.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code></p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Assets: </p> </li> <li>Click on the Monitor tab  </li> <li> <p>Click on Assets </p> </li> <li> <p>Filter and Delete Assets: </p> </li> <li>Filter Assets by entering \"Test MiX New Asset\" in the filter bar  </li> <li>Retrieve the number of assets displayed after filtering  </li> <li>Output the total number of assets to delete: <code>java      System.out.println(\"Number of Assets to delete: \" + count);</code> </li> <li>Create a loop to delete all Test MiX New Assets <ul> <li>Select the first asset  </li> <li>Click Remove </li> <li>Confirm removal  </li> <li>Repeat until all assets are deleted  </li> </ul> </li> </ol>"},{"location":"tutorials/web-testing/tutorial-7/#notes","title":"Notes","text":"<ul> <li>Ensure that the loop continues until the number of filtered assets reaches 0.  </li> <li>The asset count should be retrieved from the top-left filter results.  </li> <li>Verify that all Test MiX New Assets are successfully removed.  </li> </ul>"},{"location":"tutorials/web-testing/tutorial-8/","title":"Tutorial 8","text":"<pre><code># Test Case: Tutorial 8 - Get the Current Date and Time  \n\n## Objective  \nThe objective of this test is to write the **current date and time** as the **Passenger Name** and perform subsequent actions.  \n\n## Steps  \n\n1. **Login** to [uat.mixtelematics.com](https://uat.mixtelematics.com) with the following credentials:  \n   - **Username:** `shakedown.fleet@mailinator.com`  \n   - **Password:** `shakedownfleet123`\n\n2. **Select Organisation:**  \n   - Navigate to **Test RSO** &gt; **MiX Automation**  \n\n3. **Navigate to Passengers:**  \n   - Click on the **Monitor** tab  \n   - Click on **Passengers**  \n\n4. **Add a New Passenger:**  \n   - Click the **Green +** sign (**Add Passenger**)  \n   - Under **Passenger Name**, write the **current date and time**.  \n     - This can be done dynamically using a function to get the current date and time, such as:  \n   ```java\n       String currentDateTime = java.time.LocalDateTime.now().toString();\n       passengerNameField.sendKeys(currentDateTime);\n   ```\n   - Click **Save**  \n\n5. **Filter for the Created Passenger:**  \n   - Use the filter to find the newly created passenger by their **Name** (the current date and time).  \n\n6. **Remove the Created Passenger:**  \n   - Select the passenger  \n   - Click **Remove**  \n   - Confirm the removal  \n\n## Notes  \n- Ensure that the **current date and time** is accurately captured and displayed in the passenger name.  \n- Verify that the newly created passenger appears in the list after saving.  \n- Confirm that the passenger is successfully removed.  \n</code></pre>"},{"location":"tutorials/web-testing/tutorial-9/","title":"Test Case: Tutorial 9 - Work with Multiple Environments","text":""},{"location":"tutorials/web-testing/tutorial-9/#objective","title":"Objective","text":"<p>The objective of this test is to learn how to work with multiple environments (UAT and INT) and extract Last Trip Details based on the environment.  </p>"},{"location":"tutorials/web-testing/tutorial-9/#steps","title":"Steps","text":"<ol> <li>Login to uat.mixtelematics.com with the following credentials:  </li> <li>Username: <code>shakedown.fleet@mailinator.com</code> </li> <li> <p>Password: <code>shakedownfleet123</code></p> </li> <li> <p>Select Organisation: </p> </li> <li> <p>Navigate to Test RSO &gt; MiX Automation </p> </li> <li> <p>Navigate to Assets: </p> </li> <li>Click on the Monitor tab  </li> <li> <p>Click on Assets </p> </li> <li> <p>Filter for 'MiX Automation Live Unit': </p> </li> <li> <p>Use the filter to find the 'MiX Automation Live Unit' asset  </p> </li> <li> <p>Extract the Last Trip Details: </p> </li> <li>Write a function that checks the current environment and retrieves the Last Trip Details accordingly.  </li> <li>The function should differentiate between UAT and INT environments:  </li> </ol> <p>HINT: <code>if (currentEnvironment == Enums.Environment.INT) {          // Logic for extracting details in INT environment      } else {          // Logic for extracting details in UAT environment      }</code></p>"},{"location":"tutorials/web-testing/tutorial-9/#notes","title":"Notes","text":"<ul> <li>The XPath used to extract Last Trip Details in UAT and INT environments will differ.  </li> <li>Use an enum (<code>Enums.Environment.UAT</code> or <code>Enums.Environment.INT</code>) to manage the environment-based extraction.  </li> <li>Verify that the correct details are retrieved for both environments.  </li> </ul>"},{"location":"writing-tests/playwright/","title":"Playwright: Crafting Your First Test Within the Framework","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Ready to write your first test using our Playwright C# framework? This guide will walk you through the specific steps involved. Our framework has a particular structure to keep tests organized and maintainable. While there are a few pieces involved, we'll cover each one clearly.</p>"},{"location":"writing-tests/playwright/#understanding-the-codebase-structure","title":"Understanding the Codebase Structure","text":"<p>To successfully add and run a new web test in this framework, four key components need to be correctly set up:</p> <ol> <li>Test Source File (<code>.cs</code>): This C# file contains the actual test steps and logic (e.g., clicking buttons, verifying text) using Playwright commands.</li> <li><code>TestMarshall</code> Registration: The central <code>TestMarshall.cs</code> file acts as a dispatcher. Your new test needs to be registered within its <code>switch</code> statement so the framework knows how to execute it based on its name.</li> <li>Test Pack File (<code>.cs</code>): This separate C# file (often ending in <code>TestPack.cs</code>) sets up the execution context for your test, like specifying which environment to run against and which data file to use. It uses the NUnit testing framework for structure.</li> <li>Excel Spreadsheet File (<code>.xlsx</code>): This file, located in the <code>TestPacks</code> directory, contains the test data and execution rules, including the test name that links everything together.</li> </ol> <p>Let's go through creating each of these pieces.</p>"},{"location":"writing-tests/playwright/#1-developing-the-test-source-file-tutorialtestcs","title":"1. Developing the Test Source File (<code>TutorialTest.cs</code>)","text":"<p>First, we write the code that performs the actual test actions.</p> <ol> <li>Open the Project: Launch VS Code and open the <code>PlaywrightV2</code> repository folder.</li> <li>Determine Location: For this example, we'll create a simple \"smoke test\" (a basic check) for navigating the \"Monitor\" menu. The framework organizes tests by application area and type. Based on this, the correct location is within the Navigation &gt; Monitor &gt; Smoketests path.</li> <li>Navigate in Explorer: Use the VS Code Explorer panel (left sidebar) to navigate to: <code>Source</code> -&gt; <code>KeywordDrivenTestFramework</code> -&gt; <code>Navigation</code> -&gt; <code>Monitor</code> -&gt; <code>Smoketests</code>.</li> <li> <p>Create New File: Right-click on the <code>Smoketests</code> folder (or use the 'New File' icon at the top of the Explorer when the folder is selected) and create a new file named <code>TutorialTest.cs</code>.</p> <p> (Shows the VS Code interface for creating files)</p> </li> <li> <p>Add Code Template: An empty file <code>TutorialTest.cs</code> will open. Paste the following C# code into it. This provides a basic structure for a test within our framework:</p> <p>```csharp using System; using Microsoft.Playwright; using KeywordDrivenTestFramework; // Core framework namespace using NUnit.Framework;           // NUnit testing framework using KeywordDrivenTestFramework.PageObjects; // Access to Page Object classes</p> <p>// Namespace should match the folder structure namespace KeywordDrivenTestFramework.Navigation.Monitor.Smoketests;</p> <p>// Test class inherits from BaseClass provided by the framework public class TutorialTest : BaseClass {     // Member variables to hold test data and results     TestEntity testData;     public static TestResult testResult;     public static string reportPath;     public static string videoPath;     public static string testResultMessage;     private int counter = 1; // Counter for screenshot naming</p> <pre><code>// Constructor receiving test data\npublic TutorialTest(TestEntity testData)\n{\n    this.testData = testData;\n    reportPath = screenshotPath; // Store screenshot path for reporting\n}\n\n// The main method where test steps are executed\npublic async Task&lt;TestResult&gt; ExecuteTest()\n{\n    // String to track the current element being interacted with for logging/screenshots\n    string elementName;\n\n    ////////// START OF TEST LOGIC //////////\n\n    // Step 1: Click the Monitor Tab using its Page Object XPath\n    elementName = \"Monitor Tab\";\n    // Use the framework's playwrightInstance to perform actions\n    if (await playwrightInstance.ClickBySelector(HomePagePO.MonitorXpath(), elementName) == true)\n    {\n        // Take screenshot on success\n        await playwrightInstance.TakeScreenshot(counter + $\"-Successfully clicked {elementName}\", false);\n        counter++;\n        await playwrightInstance.WaitForPageAndDomToLoad(); // Wait for page stability\n    }\n    else\n    {\n        // Take screenshot on failure and prepare failure result\n        await playwrightInstance.TakeScreenshot(counter + $\"-Failed to click {elementName}\", true);\n        testResultMessage = $\"Failed to click {elementName} with xpath: {HomePagePO.MonitorXpath()}\";\n        counter++;\n        // Return a FAIL result immediately\n        return new TestResult(Enums.ResultStatus.FAIL, testResultMessage);\n    }\n\n    // Step 2: Click the Assets Sub-Menu item\n    elementName = \"Assets tab\";\n    if (await playwrightInstance.ClickBySelector(HomePagePO.AssetsMenuXpath(), elementName) == true)\n    {\n        // Example: Wait for a specific element on the Assets page to appear\n        await AssetsPO.AssetsPageSmartWait();\n        await playwrightInstance.TakeScreenshot(counter + $\"-Successfully clicked {elementName}\", false);\n        testResultMessage = $\"Successfully clicked {elementName} with xpath: {HomePagePO.AssetsMenuXpath()}\";\n        counter++;\n        await playwrightInstance.WaitForPageAndDomToLoad();\n        // Return a PASS result if all steps succeed\n        return new TestResult(Enums.ResultStatus.PASS, testResultMessage);\n    }\n    else\n    {\n        await playwrightInstance.TakeScreenshot(counter + $\"-Failed to click {elementName}\", true);\n        testResultMessage = $\"Failed to click {elementName} with xpath: {HomePagePO.AssetsMenuXpath()}\";\n        counter++;\n        return new TestResult(Enums.ResultStatus.FAIL, testResultMessage);\n    }\n    ////////// END OF TEST LOGIC //////////\n}\n</code></pre> <p>} ```</p> </li> <li> <p>Understanding the Template: This code defines a class <code>TutorialTest</code> that contains the test logic in the <code>ExecuteTest</code> method. It uses <code>playwrightInstance</code> (provided by the <code>BaseClass</code>) to interact with the browser (e.g., <code>ClickBySelector</code>). It references Page Objects (<code>HomePagePO</code>, <code>AssetsPO</code>) to get element locators (like XPaths), takes screenshots, and returns a <code>TestResult</code> indicating PASS or FAIL.</p> </li> <li>Adaptation: This template navigates Monitor &gt; Assets. You can adapt the steps inside <code>ExecuteTest</code>, the Page Objects used, and element locators (<code>...Xpath()</code>) to test different application areas.</li> </ol>"},{"location":"writing-tests/playwright/#2-creating-the-test-pack-file-tutorialtesttestpackcs","title":"2. Creating the Test Pack File (<code>TutorialTestTestPack.cs</code>)","text":"<p>Next, we create the \"Test Pack\" file. This uses the NUnit framework to define how the test is run.</p> <ol> <li>Navigate: In the VS Code Explorer, navigate to the Test Pack location: <code>Test</code> -&gt; <code>KeywordDrivenTestFramework.Tests</code> -&gt; <code>Unit Tests</code> -&gt; <code>Individual Tests</code>.</li> <li>Create New File: Create a new C# file in this directory named <code>TutorialTestTestPack.cs</code>.</li> <li> <p>Add Code Template: Replace the initial content with the following code:</p> <p>```csharp using System.Threading.Tasks; using Microsoft.Playwright; using NUnit.Framework;           // NUnit framework for test structure using NUnit.Allure.Core;       // Allure reporting integration for NUnit using Allure.Commons;            // Core Allure types using NUnit.Allure.Attributes;   // Allure attributes for reporting using KeywordDrivenTestFramework.Tests.TestUtilities; // Utilities for assertions/attachments</p> <p>namespace KeywordDrivenTestFramework.Tests;</p> <p>[Parallelizable(ParallelScope.Self)] // NUnit: Run tests in this fixture sequentially relative to self [AllureNUnit]                        // NUnit: Enable Allure reporting for this fixture [TestFixture]                        // NUnit: Marks this class as containing tests public class TutorialTestTestPack {     // This setup runs once before any tests in this class (fixture)     [OneTimeSetUp]     public async Task ExecutePlaywrightTests()     {         AllureLifecycle.Instance.CleanupResultDirectory(); // Clear previous Allure results         // Configure the test run via TestMarshall static properties         TestMarshall.currentEnvironment = Enums.Environments.INT; // Set environment (e.g., INT, UAT)         TestMarshall.recordVideo = false;                     // Enable/disable video recording         PlaywrightDriverUtility.slowDown = 0;                 // Optional delay between actions</p> <pre><code>    // Create TestMarshall instance, passing the Excel filename and browser\n    TestMarshall instance = new(\"TutorialTestTestPack.xlsx\", \"Chrome\");\n\n    // Execute the tests defined in the specified Excel file\n    await instance.RunKeywordDrivenTests();\n\n    // Close the Playwright instance after tests run\n    TestMarshall.playwrightInstance.CloseInstance();\n}\n\n// This is the actual NUnit test method that validates the result\n[Test(Description = \"Tutorial Test\")] // NUnit: Defines a test case\npublic void TutorialTestTestPackTest()\n{\n    // Attach results (like videos) to the Allure report\n    TestAttachmentsUtility.AddTestAttachments(TutorialTest.testResult, \"Tutorial Test Video.webm\");\n    // Assert the final result of the test logic class (TutorialTest)\n    TestAssertionsUtility.TestResultAssertion(TutorialTest.testResult);\n}\n</code></pre> <p>} ```</p> </li> <li> <p>Understanding the Template: This file uses NUnit attributes (<code>[TestFixture]</code>, <code>[OneTimeSetUp]</code>, <code>[Test]</code>). The <code>ExecutePlaywrightTests</code> method configures and runs the tests defined in the specified Excel file (<code>TutorialTestTestPack.xlsx</code>) using the <code>TestMarshall</code> class. The <code>TutorialTestTestPackTest</code> method then asserts the result obtained from the <code>TutorialTest</code> class and attaches evidence to the Allure report. This structure separates the test execution setup from the test logic.</p> </li> </ol>"},{"location":"writing-tests/playwright/#3-setting-up-the-excel-spreadsheet-file-tutorialtesttestpackxlsx","title":"3. Setting Up the Excel Spreadsheet File (<code>TutorialTestTestPack.xlsx</code>)","text":"<p>The framework uses Excel files to define which tests to run and with what data.</p> <ol> <li>Navigate: Using Windows Explorer (not VS Code), go into your cloned repository folder and find the <code>TestPacks</code> directory.</li> <li>Copy Existing File: Find any existing <code>.xlsx</code> file in this folder (e.g., <code>LoginTestPack.xlsx</code>) and make a copy of it.</li> <li>Rename: Rename the copied file to match the name used in the Test Pack code: <code>TutorialTestTestPack.xlsx</code>.</li> <li> <p>Edit Contents: Open the renamed Excel file. You need to modify the rows and columns to define your test run. Ensure it has the following columns and includes a row for your test:</p> <p> (Shows the required columns and an example row)</p> </li> <li> <p>Save: Save the changes to the Excel file.</p> </li> </ol>"},{"location":"writing-tests/playwright/#explanation-of-key-columns","title":"Explanation of Key Columns","text":"<ul> <li><code>TestName</code>: Crucial. This must exactly match the <code>case</code> name you will add to <code>TestMarshall.cs</code> (e.g., <code>TutorialTest</code>). It links the spreadsheet row to the test code.</li> <li><code>TestDescription</code>: A brief description of the test, used in Allure reports.</li> <li><code>Username</code>: The email address for the MiX Automation user used for login.</li> <li><code>Password</code>: The password for the MiX Automation user.</li> <li><code>Organisation</code>: The organization context for the test. This must be set to <code>Test RSO</code>.</li> <li> <p><code>Site</code>: The specific site/division within the organization. This must be set to <code>MiX Automation</code>.</p> </li> <li> <p>Important Note: Some framework actions, like <code>LoginToMiXTelematics</code> and <code>SelectBreadCrumb</code>, are handled by \"hidden\" test steps defined elsewhere (often in <code>Source\\KeywordDrivenTestFramework\\Navigation</code>). If login or initial navigation fails, you might need to debug those components.</p> </li> </ul>"},{"location":"writing-tests/playwright/#4-updating-the-testmarshall-file","title":"4. Updating the <code>TestMarshall</code> File","text":"<p>The final step is to register your new test class within the framework's central dispatcher.</p> <ol> <li>Navigate: In VS Code, go to the root of the project and open the file: <code>Source</code> -&gt; <code>KeywordDrivenTestFramework.Core</code> -&gt; <code>TestMarshall.cs</code>.</li> <li>Find the <code>switch</code> Statement: Scroll down within <code>TestMarshall.cs</code> to find a large <code>switch (testName)</code> statement. As of April 2025, the end of this switch is around line 1340.</li> <li> <p>Add New <code>case</code>: Add the following <code>case</code> block just before the <code>default:</code> case at the end of the <code>switch</code> statement. Make sure the case label (<code>\"TutorialTest\"</code>) exactly matches the <code>TestName</code> in your Excel file.</p> <p><code>csharp     // Add this block before the default case     case \"TutorialTest\": // Matches TestName from Excel         // Check if test should be skipped (logic handled elsewhere)         if (skip == true)         {             TestContext.Progress.WriteLine($\"[SKIP] Skipping this test for {Enums.GetEnvironmentCode(currentEnvironment)}\");             // Set result to SKIPPED if skip flag is true             TutorialTest.testResult = new TestResult(Enums.ResultStatus.SKIPPED, $\"Skipped for {Enums.GetEnvironmentCode(currentEnvironment)}\");             skip = false; // Reset skip flag             break; // Exit this case         }         // If not skipped, create an instance of your test source class         TutorialTest tut = new(testData);         // Execute the test logic and store the result         TutorialTest.testResult = await tut.ExecuteTest();         // Add report/video paths to the result object         TutorialTest.testResult.AddPaths(TutorialTest.reportPath, TutorialTest.videoPath);         i++; // Increment test counter         break; // Exit this case // default: case follows here...</code></p> </li> <li> <p>Function: This code block tells <code>TestMarshall</code>: \"When you read 'TutorialTest' from the Excel file, create an instance of the <code>TutorialTest</code> class (from <code>TutorialTest.cs</code>) and run its <code>ExecuteTest</code> method.\" It also handles skipping logic and associates results/paths.</p> </li> </ol>"},{"location":"writing-tests/playwright/#pre-testing-checklist","title":"Pre-Testing Checklist","text":"<p>Before running, quickly confirm:</p> <ul> <li>[ ] Test source code (<code>TutorialTest.cs</code>) created in the correct location.</li> <li>[ ] Test pack file (<code>TutorialTestTestPack.cs</code>) created in the correct location.</li> <li>[ ] Excel file (<code>TutorialTestTestPack.xlsx</code>) created and configured correctly in <code>TestPacks</code>.</li> <li>[ ] <code>TestMarshall.cs</code> updated with the new <code>case \"TutorialTest\":</code>.</li> </ul> <p>Good luck with your testing!</p>"},{"location":"writing-tests/selenium/","title":"Selenium: Crafting Your First Test Within the Framework","text":"<p>Author: Rofhiwa 'Ralph' Matumba</p> <p>Ready to write your first test using our Selenium Java framework? This guide will walk you through the specific steps involved using the NetBeans IDE. Our framework has a particular structure to keep tests organized and maintainable. There are a few pieces involved, but we'll cover each one clearly.</p>"},{"location":"writing-tests/selenium/#understanding-the-codebase-structure","title":"Understanding the Codebase Structure","text":"<p>To successfully add and run a new web test in this framework, four key components need to be correctly set up:</p> <ol> <li>Test Source File (<code>.java</code>): This Java file contains the actual test steps and logic (e.g., clicking buttons, verifying text) using Selenium WebDriver commands.</li> <li><code>TestMarshall</code> Registration: The central <code>TestMarshall.java</code> file acts as a dispatcher. Your new test needs to be registered within its <code>switch</code> statement so the framework knows how to execute it based on its name read from the data file.</li> <li>Test Pack File (<code>.java</code>): This separate Java file (often ending in <code>TestPack.java</code>) sets up the execution context for your test, like specifying which environment and browser to run against, and which data file to use. It uses the JUnit testing framework for structure.</li> <li>Excel Spreadsheet File (<code>.xlsx</code>): This file, located in the <code>TestPacks</code> directory, contains the test data and execution rules, including the test name that links everything together.</li> </ol> <p>Let's go through creating each of these pieces.</p>"},{"location":"writing-tests/selenium/#1-developing-the-test-source-file-tutorialtestjava","title":"1. Developing the Test Source File (<code>TutorialTest.java</code>)","text":"<p>First, we write the code that performs the actual test actions using Selenium.</p> <ol> <li>Open the Project: Launch NetBeans and ensure the <code>AutomatedTests</code> repository project is open.</li> <li>Determine Location: For this example, we'll create a simple \"smoke test\" (a basic check) for navigating the \"Monitor\" menu. The framework organizes tests by application area and type. Based on this, the correct location is within the <code>KeywordDrivenTestFramework.Navigation.Monitor.Smoketests</code> package.</li> <li>Navigate in Projects View: Use the NetBeans \"Projects\" panel (usually on the left) to navigate to: <code>AutomatedTests</code> -&gt; <code>Source Packages</code> -&gt; <code>KeywordDrivenTestFramework.Navigation.Monitor.Smoketests</code>.</li> <li>Create New Java Class: Right-click on the <code>Smoketests</code> package node, select <code>New</code> &gt; <code>Java Class...</code>.</li> <li> <p>Name the Class: In the \"Class Name\" field, enter <code>TutorialTest</code>. Leave other settings as default and click \"Finish\".</p> <p> (Shows the NetBeans dialog for creating a new Java class)</p> </li> <li> <p>Add Code Template: An empty class file <code>TutorialTest.java</code> will open. Replace its entire content with the following Java code. This provides a basic structure for a test within our framework:</p> <p>```java /  * Test class for demonstrating Monitor -&gt; Assets navigation.  / package KeywordDrivenTestFramework.Navigation.Monitor.Smoketests; // Package declaration matches folder structure</p> <p>// Necessary imports from the framework and Java libraries import KeywordDrivenTestFramework.Core.BaseClass; import static KeywordDrivenTestFramework.Core.BaseClass.SeleniumDriverInstance; // Access Selenium commands import static KeywordDrivenTestFramework.Core.BaseClass.narrator; // Access logging/reporting utility import KeywordDrivenTestFramework.Entities.Enums; import KeywordDrivenTestFramework.Entities.TestEntity; import KeywordDrivenTestFramework.Entities.TestResult; import java.awt.AWTException; import java.io.FileNotFoundException;</p> <p>// Test class must extend BaseClass provided by the framework public class TutorialTest extends BaseClass {     String errorMessage = \"\"; // Stores error messages for reporting     int counter = 1;        // Step counter for screenshots/logging     TestEntity testData;    // Holds data passed from the Excel file</p> <pre><code>// Constructor - receives test data when the test is instantiated\npublic TutorialTest(TestEntity testData) {\n    this.testData = testData;\n}\n\n// The main method where test steps are executed sequentially\npublic TestResult executeTest() throws FileNotFoundException, InterruptedException, AWTException {\n    // Start timer for measuring test duration\n    this.setStartTime();\n\n    // Execute step 1: Click Monitor Tab\n    if (!ClickMonitorTab()) {\n        // If ClickMonitorTab returns false (meaning it failed)\n        // Take a failure screenshot\n        SeleniumDriverInstance.takeScreenShot(counter + \" - Failed to click Monitor tab\", true);\n        counter++; // Increment step counter\n        // Log failure message\n        narrator.failedMessage(\"Click Monitor - \" + errorMessage);\n        // Return a FAIL result immediately\n        return new TestResult(testData, Enums.ResultStatus.FAIL, \"Failed to Click Monitor\", this.getTotalExecutionTime());\n    }\n\n    // Execute step 2: Click Asset Tab (only runs if step 1 passed)\n    if (!ClickAssetTab()) {\n        // If ClickAssetTab returns false\n        SeleniumDriverInstance.takeScreenShot(counter + \" - Failed to click Assets tab\", true);\n        counter++;\n        narrator.failedMessage(\"Navigation to Assets tab - \" + errorMessage);\n        // Return a FAIL result\n        return new TestResult(testData, Enums.ResultStatus.FAIL, \"Failed to Click Assets tab\", this.getTotalExecutionTime());\n    }\n\n    // If all steps above passed, return a PASS result\n    return new TestResult(testData, Enums.ResultStatus.PASS, \"Successfully Navigated to Assets Page\", this.getTotalExecutionTime());\n}\n\n/**\n * Helper method for Step 1: Clicks the Monitor tab.\n * Contains the specific Selenium action and error handling.\n * @return True if successful, False otherwise.\n */\npublic boolean ClickMonitorTab() {\n    // Use SeleniumDriverInstance provided by BaseClass to interact with browser\n    if (!SeleniumDriverInstance.clickElementByXpath(\"(//A[@href='#'])[1]\")) {\n        // If click fails, set error message and return false\n        errorMessage = \"Failed to click Monitor Tab using XPath: (//A[@href='#'])[1]\";\n        return false;\n    }\n    // If click succeeds, take success screenshot and return true\n    SeleniumDriverInstance.takeScreenShot(counter + \" - Clicked Monitor Tab\", false);\n    counter++;\n    return true;\n}\n\n/**\n * Helper method for Step 2: Clicks the Assets sub-menu item.\n * @return True if successful, False otherwise.\n */\npublic boolean ClickAssetTab() {\n    if (!SeleniumDriverInstance.clickElementByXpath(\"//a[contains(text(),'Assets')]\")) {\n        errorMessage = \"Failed to click Asset Tab using XPath: //a[contains(text(),'Assets')]\";\n        return false;\n    }\n\n    // Note: Fixed pauses like pause(5000) are generally discouraged.\n    // Prefer using explicit waits (e.g., waitForElementVisible) for reliability.\n    // Included here to match the original example's structure.\n    pause(5000); // Wait 5 seconds\n\n    SeleniumDriverInstance.takeScreenShot(counter + \" - Clicked Asset Tab\", false);\n    counter++;\n    return true;\n}\n</code></pre> <p>} ```</p> </li> <li> <p>Understanding the Template: This Java code defines a class <code>TutorialTest</code> extending <code>BaseClass</code>. The main logic is in <code>executeTest()</code>, which calls helper methods (<code>ClickMonitorTab</code>, <code>ClickAssetTab</code>) for each step. It uses <code>SeleniumDriverInstance</code> for browser actions (like clicking elements by XPath), <code>narrator</code> for logging, takes screenshots, and returns a <code>TestResult</code>. Using helper methods makes <code>executeTest</code> easier to read.</p> </li> <li>Adaptation: Modify the helper methods (or add new ones) and the calls within <code>executeTest</code> to interact with different elements and perform different actions. Replace the example XPaths with appropriate locators for your target elements. Consider replacing <code>pause()</code> with explicit waits provided by the framework (if available) or Selenium WebDriver.</li> </ol>"},{"location":"writing-tests/selenium/#2-creating-the-test-pack-file-tutorialtesttestpackjava","title":"2. Creating the Test Pack File (<code>TutorialTestTestPack.java</code>)","text":"<p>Next, create the \"Test Pack\" file using the JUnit framework to define test runs.</p> <ol> <li>Navigate: In the NetBeans Projects view, navigate to the <code>Test Packages</code> -&gt; <code>TestSuites</code> package (this is typically located under a separate \"Test Packages\" source root in Maven/NetBeans projects).</li> <li>Create New Java Class: Right-click on the <code>TestSuites</code> package, select <code>New</code> &gt; <code>Java Class...</code>, and name it <code>TutorialTestTestPack</code>. Click \"Finish\".</li> <li> <p>Add Code Template: Replace the initial content with the following code:</p> <p>```java /  * Test Pack file for executing TutorialTest.  / package TestSuites; // Package declaration</p> <p>// Imports from framework and JUnit import KeywordDrivenTestFramework.Entities.Enums; import KeywordDrivenTestFramework.Testing.TestMarshall; import KeywordDrivenTestFramework.Utilities.ApplicationConfig; import java.io.FileNotFoundException; import org.junit.Test; // JUnit annotation for test methods</p> <p>/*  * Test Pack class using JUnit.  * Each @Test method represents a separate test execution run.  / public class TutorialTestTestPack {     static TestMarshall instance; // Instance of the framework's test runner</p> <pre><code>// Constructor: Sets the default environment for tests in this pack\npublic TutorialTestTestPack() {\n    ApplicationConfig appConfig = new ApplicationConfig(); // Potentially loads config\n    // Define application environment for this test pack run\n    TestMarshall.currentEnvironment = Enums.Environment.INT;\n}\n\n// Test method specifically for running on Internet Explorer (if configured)\n@Test\npublic void RunTutorialTestTestPackIE() throws FileNotFoundException {\n    System.out.println(\"Executing Tutorial Test Pack on IE\"); // Console output\n    // Create TestMarshall instance: specify Excel file and Browser\n    instance = new TestMarshall(\"TestPacks\\\\TutorialTestTestPack.xlsx\", Enums.BrowserType.IE);\n    // Run the tests defined in the Excel file\n    instance.runKeywordDrivenTests();\n}\n\n// Test method specifically for running on Chrome\n@Test\npublic void RunTutorialTestTestPackChrome() throws FileNotFoundException {\n    System.out.println(\"Executing Tutorial Test Pack on Chrome\");\n    instance = new TestMarshall(\"TestPacks\\\\TutorialTestTestPack.xlsx\", Enums.BrowserType.Chrome);\n    instance.runKeywordDrivenTests();\n}\n\n// Test method specifically for running on Firefox\n@Test\npublic void RunTutorialTestTestPackFireFox() throws FileNotFoundException {\n    System.out.println(\"Executing Tutorial Test Pack on FireFox\");\n    instance = new TestMarshall(\"TestPacks\\\\TutorialTestTestPack.xlsx\", Enums.BrowserType.FireFox);\n    instance.runKeywordDrivenTests();\n}\n</code></pre> <p>} ```</p> </li> <li> <p>Understanding the Template: This file uses JUnit's <code>@Test</code> annotation to define runnable test methods. Each method (<code>RunTutorialTestTestPackChrome</code>, etc.) typically represents a run configuration for a specific browser. It creates an instance of <code>TestMarshall</code>, passing the name of the Excel data file (<code>TutorialTestTestPack.xlsx</code>) and the desired browser type. <code>TestMarshall</code> then handles reading the Excel file and executing the corresponding test logic classes. The environment (<code>INT</code>) is set in the constructor for all tests in this file.</p> </li> </ol>"},{"location":"writing-tests/selenium/#3-setting-up-the-excel-spreadsheet-file-tutorialtesttestpackxlsx","title":"3. Setting Up the Excel Spreadsheet File (<code>TutorialTestTestPack.xlsx</code>)","text":"<p>The framework uses Excel files to define which tests to run and with what data.</p> <ol> <li>Navigate: Using Windows Explorer (not NetBeans), go into your cloned repository folder (<code>AutomatedTests</code>) and find the <code>TestPacks</code> directory.</li> <li>Copy Existing File: Find any existing <code>.xlsx</code> file in this folder (e.g., <code>LoginTestPack.xlsx</code>) and make a copy of it. Copying an existing file is recommended to preserve formatting and required sheets/columns.</li> <li>Rename: Rename the copied file to match the name used in the Test Pack code: <code>TutorialTestTestPack.xlsx</code>.</li> <li> <p>Edit Contents: Open the renamed Excel file. You need to modify the rows and columns to define your test run. Ensure it has the required columns and includes a row for your test (the structure is similar across frameworks):</p> <p> (Shows the required columns and an example row)</p> </li> <li> <p>Save: Save the changes to the Excel file.</p> </li> </ol>"},{"location":"writing-tests/selenium/#explanation-of-key-columns","title":"Explanation of Key Columns","text":"<ul> <li><code>TestName</code>: Crucial. This must exactly match the <code>case</code> name you will add to <code>TestMarshall.java</code> (e.g., <code>TutorialTest</code>). It links the spreadsheet row to the test code class.</li> <li><code>TestDescription</code>: A brief description of the test, often used in test reports.</li> <li><code>Username</code>: The email address for the standard MiX Automation user used for login within the tests.</li> <li><code>Password</code>: The password for the standard MiX Automation user.</li> <li><code>Organisation</code>: The organization context for the test. This must be set to <code>Test RSO</code>.</li> <li><code>Site</code>: The specific site/division within the organization. This must be set to <code>MiX Automation</code>.</li> </ul>"},{"location":"writing-tests/selenium/#4-updating-the-testmarshall-file","title":"4. Updating the <code>TestMarshall</code> File","text":"<p>The final step is to register your new test class within the framework's central dispatcher (<code>TestMarshall.java</code>).</p> <ol> <li>Navigate: In NetBeans, go to the <code>Source Packages</code> -&gt; <code>KeywordDrivenTestFramework.Testing</code> package and open the <code>TestMarshall.java</code> file.</li> <li>Find the <code>switch</code> Statement: Scroll down within <code>TestMarshall.java</code> to find a large <code>switch (testData.TestName)</code> statement. As of April 15, 2025, the end of this switch is around line 4114.</li> <li> <p>Add New <code>case</code>: Add the following <code>case</code> block just before the <code>default:</code> case at the end of the <code>switch</code> statement. Ensure the case label (<code>\"TutorialTest\"</code>) exactly matches the <code>TestName</code> in your Excel file.</p> <p><code>java     // Add this block before the default case     case \"TutorialTest\": { // Matches TestName from Excel         // Create an instance of your test source class, passing test data         TutorialTest tut = new TutorialTest(testData);         // Execute the test logic and add the result to the report generator         reportGenerator.addResult(tut.executeTest());         // Increment test counter         numberOfTest++;         break; // Exit this case     }     // default: case follows here...</code></p> </li> <li> <p>Function: This code block tells <code>TestMarshall</code>: \"When you read 'TutorialTest' from the Excel file, create an instance of the <code>TutorialTest</code> class (from <code>TutorialTest.java</code>), run its <code>executeTest</code> method, and add the returned result to the report.\"</p> </li> </ol>"},{"location":"writing-tests/selenium/#pre-testing-checklist","title":"Pre-Testing Checklist","text":"<p>Before running, quickly confirm:</p> <ul> <li>[ ] Test source code (<code>TutorialTest.java</code>) created in the correct package.</li> <li>[ ] Test pack file (<code>TutorialTestTestPack.java</code>) created in the correct package (<code>TestSuites</code>).</li> <li>[ ] Excel file (<code>TutorialTestTestPack.xlsx</code>) created and configured correctly in <code>TestPacks</code>.</li> <li>[ ] <code>TestMarshall.java</code> updated with the new <code>case \"TutorialTest\":</code>.</li> </ul> <p>Good luck with your testing!</p>"}]}